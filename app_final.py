import streamlit as st
from streamlit_extras.let_it_rain import rain
from streamlit_extras.customize_running import center_running
import pandas as pd
import numpy as np
import random 
import ydata
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from streamlit_pandas_profiling import st_profile_report
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns
from streamlit_pandas_profiling import st_profile_report
import matplotlib.pyplot as plt
import geopandas as gpd
from sklearn.preprocessing import LabelEncoder
from sklearn.cluster import KMeans
from scipy.stats import chi2_contingency
import requests
import plotly.express as px
from matplotlib.colors import LinearSegmentedColormap, to_hex
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
import statsmodels.api as sm
import statsmodels.formula.api as smf
from plotly.subplots import make_subplots
import warnings

import reg_age_couleur
st.set_page_config(
    page_title="Analyse du profil des clients Aramisauto",
    page_icon="üöó",
    layout="wide",
    initial_sidebar_state="expanded"
)


switch_voiture = st.sidebar.toggle("Activer le mode voiture")

st.sidebar.markdown("##### Choisissez les couleurs pour les graphiques :")

color1 = st.sidebar.color_picker("Couleur 1", "#4169E1")
color2 = st.sidebar.color_picker("Couleur 2", "#B19CD9") 


st.sidebar.markdown(
    """
    <div style="text-align: center; font-size: 12px; color: #999; padding-top: 1rem;">
       D√©velopp√© par BRAULT Juliette, CAUSEUR L√©na et PRUSIEWICZ Louis.
    </div>
    """,
    unsafe_allow_html=True
)

@st.cache_data(show_spinner=True)
def load_data():
    table_full = pd.read_csv("table_full.csv")
    table_vehicule = pd.read_csv("table_vehicule.csv")
    
    import json
    list_options = set()
    for value in table_vehicule['OFFER_EQUIPMENTS_MAIN_LIST'].dropna():
        try:
            for option in json.loads(value):
                list_options.add(option['label'])
        except:
            continue

    for option in list_options:
        clean_label = option.lower().replace(" ", "_").replace("/", "_").replace('√©', 'e').replace('√®', 'e').replace('√†', 'a').replace('√π', 'u')
        flag_name = f'flag_{clean_label}'
        table_vehicule[flag_name] = table_vehicule['OFFER_EQUIPMENTS_MAIN_LIST'].apply(
            lambda x: 1 if isinstance(x, str) and option in x else 0
        )

    return table_full, table_vehicule

table_full, table_vehicule = load_data()
def bienvenue():
    st.subheader("Bienvenue sur l'application d'analyse du profil des clients Aramisauto")

    st.markdown("<br>", unsafe_allow_html=True)

    # Ajout logo
    col1, col2, col3 = st.columns(3)
    with col2:
        st.image("logo_aramisauto.jpg", width=300)

    st.markdown("<br>", unsafe_allow_html=True)

    # Contexte et objectifs
    st.markdown(
        """
        <div style="font-size: 20px; line-height:1.4;">

        **Contexte :**  

        Aramisauto souhaite mieux comprendre le profil de ses clients pour optimiser sa strat√©gie marketing.  
        Nous analysons des donn√©es internes, enrichies avec des sources externes, pour obtenir une vue compl√®te du comportement de nos clients.



        **Objectifs du projet :**

        - **Analyser les donn√©es internes** pour identifier les comportements et les pr√©f√©rences des clients.
        - **Enrichir les donn√©es** avec des informations externes afin d'avoir une compr√©hension globale.
        - **D√©velopper une appli interactive** pour visualiser et interpr√©ter ces donn√©es.
        </div>
        """, 
        unsafe_allow_html=True
    )

    st.markdown("<br>", unsafe_allow_html=True)
    
    # Instructions de navigation
    st.markdown("""
        <div style="font-size: 20px; line-height:1.4;">

        **Navigation :**  
        Nous avons bas√© notre analyse des clients d'Aramisauto autour de 4 hypoth√®ses principales.
        - **Hypoth√®se 1 :**  Est ce que le prix d'un v√©hicule est influenc√© par le nombre d'options disponibles ?
        - **Hypoth√®se 2 :**  Est ce que les clients ayant consult√© intens√©ment une fiche v√©hicule pr√©sentent un comportement et un profil distincts des autres clients ?
        - **Hypoth√®se 3 :**  Est ce que l'age d'un client va influenc√© le choix de couleur de sa futur voiture ?
        - **Hypoth√®se 4 :**  Est ce que la localisation d'un client va avoir une influenc√© sur le choix de sa voiture ?
        </div>
        """,
    unsafe_allow_html=True
    )

    st.markdown("<br>", unsafe_allow_html=True)
    
    # Information compl√©mentaire
    st.info("Cette application a √©t√© d√©velopp√©e dans le cadre du projet Datamining pour l'ann√©e 2024/2025.")
    
    
    # st.subheader("Statistiques descriptives")
    # st.write(table_full.describe(include='all'))
    
    
    if switch_voiture:
        rain(emoji="üöó", font_size=70, falling_speed=3, animation_length=600)

bienvenue.__name__ = "Accueil" # change le nom dans le sidebar


    
def ensemble():
    st.title("Statistiques descriptives")

    #metrics clients
    st.markdown("<h1 style='text-decoration: underline;'>Statistiques clients</h1>", unsafe_allow_html=True)
    col1_1, col1_2, col1_3, col1_4 = st.columns(4)
    
    col1_1.metric("√Çge moyen des clients", f"{table_full['age_client'].mean():.1f} ans")
    col1_2.metric("Anciennet√© moyenne", f"{table_full['anciennete'].mean():.1f} ans")
    col1_3.metric("Nombre de femmes", table_full['GENDER'].value_counts().get('F', 0))
    col1_4.metric("Nombre d'hommes", table_full['GENDER'].value_counts().get('H', 0))

    # Graphiques clients
    col_client_1, col_client_2 = st.columns(2)

    with col_client_1.container():
        st.subheader("R√©partition par tranches d'√¢ge")
        fig1, ax1 = plt.subplots()
        ax1.hist(table_full['age_client'].dropna(), bins=10, color=color1, edgecolor='black')
        ax1.set_xlabel("√Çge")
        ax1.set_ylabel("Nombre de clients")
        ax1.set_title("Distribution de l'√¢ge des clients")
        st.pyplot(fig1)

    with col_client_2.container():
        st.subheader("R√©partition par genre")
        fig2, ax2 = plt.subplots()
        gender_counts = table_full['GENDER'].value_counts()
        ax2.pie(gender_counts, labels=["Hommes", "Femmes"], autopct='%1.1f%%', startangle=90, 
            colors=[color1, color2], wedgeprops={'edgecolor': 'black'})
        ax2.axis('equal')
        st.pyplot(fig2)

    
    #metrics voitures
    st.markdown("<h1 style='text-decoration: underline;'>Statistiques voitures</h1>", unsafe_allow_html=True)
    
    col2_1, col2_2, col2_3 = st.columns(3)

    col2_1.metric("Nombre de voitures disponibles :", table_vehicule.shape[0])
    col2_2.metric("Nombre de mod√®les de voitures :", table_vehicule['VEHICULE_MODELE'].nunique())
    col2_3.metric("Nombre de marques diff√©rentes disponibles :", table_vehicule["VEHICULE_MARQUE"].nunique())
    
    col3_1, col3_2, col3_3 = st.columns(3)
    
    col3_1.metric("Taux de reprise", f"{(table_full['FLAG_REPRISE'].sum() / table_full['FLAG_COMMANDE'].sum() * 100):.1f} %")
    col3_2.metric("Kilom√©trage moyen", f"{table_vehicule['VEHICULE_KM'].mean():,.0f} km")    
    col3_3.metric("Prix moyen TTC", f"{table_full['PRIX_VENTE_TTC_COMMANDE'].mean():,.0f} ‚Ç¨")

    
    col_voitures_1, col_voitures_2 = st.columns(2)
    #repartition par marque
    with col_voitures_1.container():
        st.subheader("Nombre de voitures par marque")
        qtte_marque = st.number_input("Nombre de marques √† repr√©senter", min_value=1, max_value=table_vehicule['VEHICULE_MARQUE'].nunique(), value=10)
        fig5, ax5 = plt.subplots()
        top_marques = table_vehicule['VEHICULE_MARQUE'].value_counts().head(qtte_marque)
        ax5.barh(top_marques.index[::-1], top_marques.values[::-1], color=plt.cm.Blues(np.linspace(0.4, 0.9, 10)))
        ax5.set_xlabel("Nombre de voitures")
        ax5.set_ylabel("Marque")
        st.pyplot(fig5)
        
    #repartion par modele
    with col_voitures_2.container():
        st.subheader("Nombre de voitures par mod√®le")
        qtte_modele = st.number_input("Nombre de mod√®les √† repr√©senter", min_value=1, max_value=table_vehicule['VEHICULE_MODELE'].nunique(), value=10)
        fig7, ax7 = plt.subplots()
        top_modeles = table_vehicule['VEHICULE_MODELE'].value_counts().head(qtte_modele)
        ax7.barh(top_modeles.index[::-1], top_modeles.values[::-1], color=plt.cm.Blues(np.linspace(0.4, 0.9, 10)))
        ax7.set_xlabel("Nombre de voitures")
        ax7.set_ylabel("Mod√®le")
        st.pyplot(fig7)
    

    col_voitures_2_1, col_voitures_2_2 = st.columns(2)
    # VO vs VN
    with col_voitures_2_1.container():
        st.subheader("R√©partition des voitures neuves / d'occasions")
        fig6, ax6 = plt.subplots(figsize=(5, 4))
        table_vehicule['VEHICULE_TYPE'].value_counts().plot.pie(autopct='%1.1f%%', startangle=90, ax=ax6, colors=[color1, color2],wedgeprops={'edgecolor': 'black'})
        ax6.set_ylabel('')
        st.pyplot(fig6)

    with col_voitures_2_2.container():
        st.subheader("Prix de vente des v√©hicules")
        nb_bins = st.slider("Nombre de bins", 0, 30, 20)
        fig4, ax4 = plt.subplots()
        prix_vente = table_full['PRIX_VENTE_TTC_COMMANDE'].dropna()
        ax4.hist(prix_vente, bins=nb_bins, color=color1,edgecolor='black')
        ax4.set_xlabel("Prix de vente TTC")
        ax4.set_ylabel("Quantit√©")
        st.pyplot(fig4)
        
    col_voitures_3_1, col_voitures_3_2 = st.columns(2)
    #repartition par carburant
    with col_voitures_3_1.container():
        energy_colors = {'Essence': "#2ecc71",'Diesel': "#FDDB15",'Hybride': "#9900D0",'Electrique': "#2980b9",'Autre': "#A4A4A4"}
        st.subheader("R√©partition des carburants")
        fig3, ax3 = plt.subplots()
        top_energies = table_vehicule['VEHICULE_ENERGIE'].value_counts()
        colors = [energy_colors.get(energy, "#bdc3c7") for energy in top_energies.index]
        ax3.barh(top_energies.index[::-1], top_energies.values[::-1], color=plt.cm.Purples(np.linspace(0.2, 0.9, 10)))
        ax3.set_xlabel("Nombre de voitures")
        ax3.set_ylabel("Carburant")
        st.pyplot(fig3)

    
    if switch_voiture:
        rain(emoji="üöó", font_size=70, falling_speed=3.5, animation_length=600)
        
ensemble.__name__ = "Statistiques descriptives"       
        
def page_1():
    st.title("Hypoth√®se Prix x Options")
    st.write("Dans cette hypoth√®se, nous cherchons √† d√©terminer si le nombre d‚Äôoptions ou d‚Äô√©quipements disponibles sur un mod√®le de v√©hicule a un impact significatif sur son prix de vente.")
    st.write("L'objectif est d'√©tudier s'il existe une corr√©lation entre le niveau d‚Äô√©quipement d'un v√©hicule et son positionnement tarifaire. En d‚Äôautres termes, plus un v√©hicule poss√®de d‚Äôoptions (comme la climatisation, le GPS, le radar de recul, etc.), plus son prix final est susceptible d'√™tre √©lev√©. Cette analyse permettrait de mieux comprendre le r√¥le des √©quipements dans la valorisation commerciale des v√©hicules et d‚Äôidentifier dans quelle mesure ils influencent la strat√©gie de tarification.")
    #tout pour pouvoir travailler comme il faut
    EQUIPEMENTS = ['flag_jantes_alliage','flag_toit_ouvrant_panoramique','flag_climatisation','flag_regulateur_de_vitesse','flag_radar_de_recul','flag_gps','flag_camera_de_recul','flag_interieur_cuir','flag_bluetooth','flag_apple_car_play','flag_android_auto']
    table_vehicule['NB_EQUIPEMENTS'] = table_vehicule[EQUIPEMENTS].sum(axis=1)
    
    table_merged = table_full.merge(table_vehicule,how="left",left_on="VEHICULE_ID_COMMANDE",right_on="VEHICULE_ID")    
    
    st.subheader("Prix moyen selon le nombre d‚Äô√©quipements")
    col_1, col_2, col_3 = st.columns(3)
    nb_equip = col_3.slider("Choisissez le nombre d'√©quipements voulu (pour le prix moyen):", 0, table_merged['NB_EQUIPEMENTS'].max(), 5)
    
    #metric
    col_1,col_2, col_3 = st.columns(3)
    with col_1.container():
        st.metric("Prix moyen (0 √©quipement)",f"{table_merged[table_merged['NB_EQUIPEMENTS'] == 0]['PRIX_VENTE_TTC_COMMANDE'].mean():,.0f} ‚Ç¨")
    with col_2.container():
        st.metric("Prix moyen (11 √©quipements)",f"{table_merged[table_merged['NB_EQUIPEMENTS'] == table_merged['NB_EQUIPEMENTS'].max()]['PRIX_VENTE_TTC_COMMANDE'].mean():,.0f} ‚Ç¨")
    with col_3.container():
        st.metric(f"Prix moyen ({nb_equip} √©quipement(s))",f"{table_merged[table_merged['NB_EQUIPEMENTS'] == nb_equip]['PRIX_VENTE_TTC_COMMANDE'].mean():,.0f} ‚Ç¨")
        
    
    col_1, col_2 = st.columns(2)
    #prix en fonction du nombre d'equip / scatterplot
    with col_1.container():
        fig8, ax8 = plt.subplots()
        ax8.scatter(table_merged["NB_EQUIPEMENTS"],table_merged["PRIX_VENTE_TTC_COMMANDE"],alpha=0.5, color=color1, edgecolors='black')
        ax8.set_xlabel("Nombre d'√©quipements")
        ax8.set_ylabel("Prix TTC en ‚Ç¨")
        ax8.set_title("Corr√©lation entre prix et nombre d'√©quipements")
        st.pyplot(fig8)
    
    #prix moyen en fonction du nombre d'equip
    with col_2.container():
        mean_prix = table_merged.groupby("NB_EQUIPEMENTS")["PRIX_VENTE_TTC_COMMANDE"].mean().reset_index()
        fig9, ax9 = plt.subplots()
        ax9.plot(mean_prix["NB_EQUIPEMENTS"],mean_prix["PRIX_VENTE_TTC_COMMANDE"],marker='o',color=color1)
        ax9.set_xlabel("Nombre d'√©quipements")
        ax9.set_ylabel("Prix moyen TTC en ‚Ç¨")
        ax9.set_title("Prix moyen par nombre d'√©quipements")
        st.pyplot(fig9)
        
    with st.container():
        col_1, col_2 = st.columns(2)    
        col_1.write('Ce graphique montre la relation entre le nombre d‚Äô√©quipements pr√©sents dans un v√©hicule et son prix TTC. On observe une tendance g√©n√©rale o√π le prix augmente avec le nombre d‚Äô√©quipements. Les points sont dispers√©s, mais on remarque clairement des "paliers" pour chaque nombre d‚Äô√©quipements, indiquant que les voitures mieux √©quip√©es tendent √† √™tre plus ch√®res')
        col_2.write("Ce graphique pr√©sente l'√©volution du prix moyen TTC en fonction du nombre d‚Äô√©quipements. La courbe montre une progression r√©guli√®re, avec une acc√©l√©ration notable √† partir de 8 √©quipements. Cela confirme que plus un v√©hicule dispose d‚Äô√©quipements, plus son prix moyen est √©lev√©, avec un effet particuli√®rement marqu√© pour les v√©hicules tr√®s bien √©quip√©s.")
    col_1, col_2 = st.columns(2)
    
    
    #prix par marque en fct du nmobre d'√©quipement
    with col_1.container():
        st.subheader("Prix moyen selon le nombre d‚Äô√©quipements pour chaque marque")
        #choix marque 
        marques = table_merged['VEHICULE_MARQUE_x'].dropna().unique()
        selected_marque = st.selectbox("Marque : ", sorted(marques))

        table_merged_marque = table_merged[table_merged['VEHICULE_MARQUE_x'] == selected_marque]
        prix_equip = table_merged_marque.groupby("NB_EQUIPEMENTS")["PRIX_VENTE_TTC_COMMANDE"].mean().reset_index()

        fig10, ax10 = plt.subplots()
        ax10.plot(prix_equip["NB_EQUIPEMENTS"],prix_equip["PRIX_VENTE_TTC_COMMANDE"],marker='o',linestyle='-',color=color1)
        ax10.set_xlabel("Nombre d'√©quipements")
        ax10.set_ylabel("Prix moyen TTC en ‚Ç¨")
        ax10.set_title(f"Prix moyen par nombre d‚Äô√©quipements de la marque {selected_marque}")
        st.pyplot(fig10)
        
        
        
    #prix par modele en fct du nmobre d'√©quipement
    with col_2.container():
        st.subheader("Prix moyen selon le nombre d‚Äô√©quipements pour chaque mod√®le")
        #choix modele
        col1, col2 = st.columns(2)
        marques = table_merged['VEHICULE_MARQUE_x'].dropna().unique()
        selected_marque = col1.selectbox("Marque :", sorted(marques))
        modeles = table_merged[table_merged['VEHICULE_MARQUE_x'] == selected_marque]['VEHICULE_MODELE_x'].dropna().unique()
        selected_modele = col2.selectbox("Mod√®le :", sorted(modeles))

        #filtre df
        table_merged_modele = table_merged[(table_merged['VEHICULE_MARQUE_x'] == selected_marque) &(table_merged['VEHICULE_MODELE_x'] == selected_modele)]
        prix_equip = table_merged_modele.groupby("NB_EQUIPEMENTS")["PRIX_VENTE_TTC_COMMANDE"].mean().reset_index()


        fig11, ax11 = plt.subplots()
        ax11.plot(prix_equip["NB_EQUIPEMENTS"],prix_equip["PRIX_VENTE_TTC_COMMANDE"],marker='o',linestyle='-',color=color1)
        ax11.set_xlabel("Nombre d'√©quipements")
        ax11.set_ylabel("Prix moyen TTC en ‚Ç¨")
        ax11.set_title(f"Prix moyen par nombre d‚Äô√©quipements du modele {selected_modele}")
        st.pyplot(fig11)

        
    st.subheader("Analyse en Composantes Principales des √âquipements")
    
    flag_cols = [col for col in table_merged.columns if col.startswith("flag_") and col.endswith("_y")]
    X = table_merged[flag_cols].copy()
    X.columns = [col.replace("_y", "") for col in X.columns]
    df = table_merged.dropna(subset=["PRIX_VENTE_TTC_COMMANDE"])
    X = X.loc[df.index]
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    pca = PCA(n_components=2)
    X_pca = pca.fit_transform(X_scaled)

    df_pca = pd.DataFrame(X_pca, columns=["PC1", "PC2"])
    df_pca["PRIX"] = df["PRIX_VENTE_TTC_COMMANDE"].values

    fig, ax = plt.subplots(figsize=(7, 5))
    scatter = ax.scatter(df_pca["PC1"], df_pca["PC2"], c=df_pca["PRIX"], cmap="viridis", alpha=0.6)
    ax.set_xlabel("Composante principale 1")
    ax.set_ylabel("Composante principale 2")
    cbar = plt.colorbar(scatter, ax=ax)
    cbar.set_label("Prix TTC")
    st.pyplot(fig)
    loadings = pd.DataFrame(pca.components_.T, columns=["PC1", "PC2"], index=X.columns)
    top_features_pc1 = loadings.abs().sort_values("PC1", ascending=False)

    st.subheader("Equipements les plus d√©terminants dans la fixation du prix")
    st.dataframe(top_features_pc1)
    correlation = np.corrcoef(df_pca["PC1"], df_pca["PRIX"])[0, 1]
    st.markdown(f"**Corr√©lation entre PC1 et le prix :** `{correlation:.2f}`")
    st.write("La corr√©lation de 0,47 √©tablie entre la premi√®re composante de l‚ÄôACP et le prix d√©montre qu‚Äôen g√©n√©ral, plus une voiture est √©quip√©e, plus son prix augmente. Bien que cette relation ne soit pas absolue, elle indique clairement que les √©quipements exercent une influence notable sur la valeur du v√©hicule.")

    st.title("Conclusion de l'hypoth√®se")
    st.write("On constate que plus une voiture est dot√©e d‚Äô√©quipements, plus son prix tend √† augmenter. Cependant, l‚Äôimpact de chaque option n‚Äôest pas √©quivalent : des √©quipements comme le Bluetooth ou la climatisation, devenus tr√®s r√©pandus, influencent moins aujourd‚Äôhui le prix que par le pass√©. En revanche, des options telles qu‚ÄôAndroid Auto, Apple CarPlay ou le radar de recul contribuent de mani√®re plus significative √† la valorisation du v√©hicule. Ainsi, m√™me si certaines fonctionnalit√©s se g√©n√©ralisent, le nombre total d‚Äô√©quipements demeure un indicateur fiable de l‚Äô√©volution du prix d‚Äôune voiture.")

    if switch_voiture:
        rain(emoji="üöó", font_size=70, falling_speed=3.5, animation_length=600)
    
        
page_1.__name__ = "Hypoth√®se Prix x Options"
    
    
def page_2():
    st.title("Hypoth√®se Consultation x Profil")
    
    st.subheader("On cherche √† savoir ici si les clients ayant consult√© intens√©ment une fiche v√©hicule pr√©sentent un comportement et un profil distincts des autres clients (temps de r√©flexion, caract√©ristiques du v√©hicule, √¢ge...).")

    st.markdown("### M√©thodologie et processing des donn√©es")
    
    st.write("""
    1. **Correspondance V√©hicule Consult√© vs V√©hicule Achet√© :**  
       Pour garantir la pertinence des donn√©es, nous avons filtr√© les consultations pour ne retenir que celles concernant un v√©hicule effectivement achet√©. Cela est r√©alis√© en comparant la marque, le mod√®le et l'√©nergie du v√©hicule entre la page produit et la fiche d'achat.

    2. **Identification des clients 'extr√™mes' :**  
       Nous avons isol√© les clients ayant r√©alis√© un nombre particuli√®rement √©lev√© de consultations (>= 20), afin d'examiner de plus pr√®s leurs comportements sp√©cifiques.

    3. **Calcul du temps de r√©flexion :**  
       Pour chaque client extr√™me, nous avons calcul√© le temps de r√©flexion, c'est-√†-dire l'intervalle en jours entre la premi√®re consultation de la fiche v√©hicule et la date de commande. Ce param√®tre nous permet de jauger le d√©lai dans le processus d√©cisionnel.
    """)

    st.markdown("<h2 style='text-decoration: underline;'>Statistiques descriptives</h2>", unsafe_allow_html=True)

    profil_client = pd.read_csv("profil_client.csv")

    # D√©finir les intervalles de consultations (adapt√©s selon vos donn√©es)
    max_consult = profil_client['Nb_Consultations'].max()
    bins = [20, 30, 40, 60, 80, 100, max_consult + 1]
    labels = ["20-30", "31-40","41-60", "61-80", "81-100", "101 et plus"]
    
    # Cr√©er la colonne "Tranche" avec pd.cut()
    profil_client['Tranche'] = pd.cut(profil_client['Nb_Consultations'], bins=bins, labels=labels, right=False)
    
    # Calculer la r√©partition des consultations par tranche
    repartition = profil_client['Tranche'].value_counts().sort_index().reset_index()
    repartition.columns = ['Intervalle des consultations', 'Nombre de clients']

    repartition.set_index("Intervalle des consultations", inplace=True)

    # Calcul des statistiques de consultations
    max_consult = profil_client['Nb_Consultations'].max()
    mean_consult = profil_client['Nb_Consultations'].mean()
    total_consult = profil_client['Nb_Consultations'].sum()

    # Affichage des m√©triques pour les consultations
    col_consult_1, col_consult_2, col_consult_3 = st.columns(3)
    col_consult_1.metric("Consultations maximales effectu√© par un client", f"{max_consult}")
    col_consult_2.metric("Nombre de consultations moyennes", f"{mean_consult:.0f}")
    col_consult_3.metric("Nombre total de consultations", f"{total_consult}")

    # --- Graphique 1 : Histogramme du nombre de consultations ---
    # Cr√©ation de l'histogramme avec le label personnalis√© pour l'axe des X
    fig_hist = px.histogram(
        profil_client,
        x='Nb_Consultations',
        nbins=30,
        title="Histogramme du nombre de consultations",
        labels={"Nb_Consultations": "Nombre de consultations", "y":"Nombre de clients"},
        color_discrete_sequence=[color1]
    )
    
    # Personnalisation des informations affich√©es au survol
    fig_hist.update_traces(
        hovertemplate="Nombre de clients : %{y}<extra></extra>"
    )

    fig_hist.update_traces(
    marker_line_color='black',  # d√©finit la couleur de la bordure
    marker_line_width=1         # d√©finit l'√©paisseur de la bordure
    )

    fig_hist.update_layout(
    title={
        'text': "Histogramme du nombre de consultations",
        'x': 0.5,           # Centre le titre horizontalement (0.5 = 50%)
        'xanchor': 'center',
        'font': {
            'size': 24    # D√©finit la taille de la police du titre
        }
    })

    fig_hist.update_layout(
        yaxis_title="Nombre de clients"
    )


    # Affichage de l'histogramme sur la moiti√© de la page (avec colonnes)
    col1, col2 = st.columns(2)
    with col1:
        st.plotly_chart(fig_hist, use_container_width=True)

    with col2:
        st.markdown("<br>", unsafe_allow_html=True)
        st.markdown(
            '<div style="text-align: center; font-size: 24px;"><strong>R√©partition par tranches de consultations</strong></div>',
            unsafe_allow_html=True
        )
        st.markdown("<br><br>", unsafe_allow_html=True)
        st.table(repartition)

    st.write("La majorit√© des clients consulte une fiche v√©hicule entre 20 et 30 fois, ce qui indique une recherche cibl√©e et efficace d‚Äôinformations. Toutefois, on observe √©galement une minorit√© de clients qui revient 101 fois ou plus sur une m√™me fiche. Ce comportement intensif peut traduire une h√©sitation marqu√©e ou alors un besoin d'approfondissement avant de prendre une d√©cision d‚Äôachat, sugg√©rant la pr√©sence d'un profil distinct. Nous allons maintenant √©tudier plus en d√©tail si ces consultations r√©p√©t√©es s'accompagnent d‚Äôun temps de r√©flexion plus long, ou encore si elles se corr√®lent avec des caract√©ristiques sp√©cifiques du v√©hicule ou des tranches d‚Äô√¢ge particuli√®res.")

    st.markdown("<h2 style='text-decoration: underline;'>Comportement et profil des clients</h2>", unsafe_allow_html=True)

    st.write(
    "Nous avons d√©fini quatre niveaux d'intensit√© en fonction du nombre de consultations : 'Faible' pour moins de 40 consultations, 'Moyen' pour un nombre compris entre 40 et 60, 'Elev√©' pour entre 60 et 80, et 'Tr√®s √©lev√©' pour plus de 80 consultations. Cette classification facilite l'analyse du comportement des clients ainsi que leur profil."
    )


    # --- Graphique 2 : Bar chart du temps de r√©flexion moyen par intensit√© de consultation ---
    order_list = ["Faible", "Moyen", "Elev√©", "Tr√®s √©lev√©"]

    # Calcul du temps de r√©flexion moyen par intensit√© de consultation
    temps_moyen = (
        profil_client
        .groupby('Consultation_Intensit√©')['Temps_Reflexion']
        .mean()
        .reset_index()
    )

    # Convertir la colonne en cat√©gorie ordonn√©e
    temps_moyen['Consultation_Intensit√©'] = pd.Categorical(
        temps_moyen['Consultation_Intensit√©'],
        categories=order_list,
        ordered=True
    )

    # Trier le DataFrame selon l'ordre d√©fini
    temps_moyen = temps_moyen.sort_values('Consultation_Intensit√©')

    # Cr√©ation du bar chart
    fig_bar = px.bar(
        temps_moyen,
        x='Consultation_Intensit√©',
        y='Temps_Reflexion',
        title="Temps de r√©flexion moyen par intensit√© de consultation",
        labels={
            'Temps_Reflexion': "Temps de r√©flexion (jours)",
            'Consultation_Intensit√©': "Intensit√© de consultation"
        },
        text_auto=".1f",
        color_discrete_sequence=[color1]
    )

    # Personnalisation du graphique si besoin
    fig_bar.update_traces(
        marker_line_color='black',
        marker_line_width=1,
        hovertemplate="Temps de r√©flexion : %{y} jours"
    )
    fig_bar.update_layout(
        title={
            'x': 0.5,   
            'xanchor': 'center',
            'font': {'size': 24}
        },
        yaxis_title="Temps de r√©flexion (jours)"
    )

    # --- Graphique 3 : Heatmap de la r√©partition (%) de l'intensit√© des consultations par tranche d'√¢ge ---
    heat_data = pd.crosstab(
        profil_client['Tranche_Age'],
        profil_client['Consultation_Intensit√©'], normalize = 'index'
    ) * 100

    # D√©finition de l'ordre souhait√© pour les lignes et les colonnes
    ordre_lignes = ["Moins de 30", "30-44", "45-59", "60+"]
    ordre_colonnes = ["Faible", "Moyen", "Elev√©", "Tr√®s √©lev√©"]

    # R√©indexer le DataFrame heat_data
    heat_data = heat_data.reindex(index=ordre_lignes, columns=ordre_colonnes)

    fig_heat = px.imshow(
        heat_data,
        text_auto=".2f",
        title="Pourcentage de niveaux de consultation par tranche d'√¢ge",
        labels={'x': "Intensit√© de consultation", 'y': "Tranche d'√¢ge", 'color': "Pourcentage (%)"}
    )

    fig_heat.update_layout(
    title={
        'x': 0.5,       
        'xanchor': 'center',
        'font': {'size': 24}  
    })

    fig_heat.update_coloraxes(showscale=False)

    # D√©sactivation compl√®te du survol pour chaque trace
    for trace in fig_heat.data:
        trace.hoverinfo = 'skip'       # Supprime l'info de survol
        trace.hovertemplate = ''       # D√©finit un template vide

    # D√©sactivation du mode hover dans la mise en page
    fig_heat.update_layout(hovermode=False)


    # Affichage dans une colonne de 50% de la page
    col1, col2 = st.columns(2)
    with col1:
        st.plotly_chart(fig_bar, use_container_width=True)
        st.write("En moyenne, plus un client consulte intens√©ment une fiche v√©hicule, plus son temps de r√©flexion tend √† √™tre √©lev√©. Ainsi, les clients avec une intensit√© de consultations faible ont en moyenne un temps de r√©flexion d'environ 9,33 jours, tandis que ceux dont l'intensit√© est moyenne ou √©lev√©e ont respectivement un temps de r√©flexion d'environ 10,90 et 12,50 jours. Il est √©galement int√©ressant de noter que la diff√©rence entre les groupes 'Elev√©' (12,50) et 'Tr√®s Elev√©' (12,58) est minime. Ce constat sugg√®re qu‚Äôapr√®s un certain seuil de consultations, l‚Äôaugmentation du nombre de visites ne correspond pas √† une prolongation significative du temps de r√©flexion.")

    with col2:
        st.plotly_chart(fig_heat, use_container_width=True)
        st.write("Pour la tranche d‚Äô√¢ge Moins de 30, on observe une absence totale de consultations dans la cat√©gorie 'Elev√©'. La r√©partition indique que 69,23‚ÄØ% des consultations se situent en 'Faible', 20,51‚ÄØ% en 'Moyen' et 10,26‚ÄØ% en 'Tr√®s √©lev√©'. Ce profil sugg√®re que les plus jeunes adoptent une approche polaris√©e, oscillant entre une consultation limit√©e et un engagement marqu√©, sans passer par un niveau interm√©diaire. Pour la tranche 30-44, la grande majorit√© des consultations se positionne √©galement dans la cat√©gorie 'Faible'(64,44‚ÄØ%), suivie de 21,11‚ÄØ% en 'Moyen'. Les niveaux 'Elev√©' (6,67‚ÄØ%) et 'Tr√®s √©lev√©' (7,78‚ÄØ%) repr√©sentent des parts moindres, indiquant une recherche g√©n√©ralement rapide et cibl√©e, avec quelques cas d‚Äôengagement plus approfondi. La tranche 45-59 pr√©sente un sch√©ma similaire, avec 65‚ÄØ% des consultations en 'Faible', 20‚ÄØ% en 'Moyen', et 7,50‚ÄØ% dans chacune des cat√©gories 'Elev√©' et 'Tr√®s √©lev√©'. Cette r√©partition homog√®ne laisse penser que le comportement de navigation est assez √©quilibr√© dans ce groupe. Enfin, pour la tranche 60+, m√™me si la majorit√© des consultations reste en 'Faible' (71,70‚ÄØ%), on note une proportion plus √©lev√©e dans le niveau 'Elev√©' (11,32‚ÄØ%) accompagn√©e de 13,21‚ÄØ% en 'Moyen' et seulement 3,77‚ÄØ% en 'Tr√®s √©lev√©'. Ce constat sugg√®re que, malgr√© une tendance globale √† une consultation moins intensive, une partie des clients de ce groupe s‚Äôengage de fa√ßon plus approfondie. En r√©sum√©, bien que tous les groupes semblent majoritairement se contenter d‚Äôun niveau de consultation faible, des nuances importantes apparaissent selon les tranches d‚Äô√¢ge. Les moins de 30 adoptent une strat√©gie polaris√©e, les 30-44 et 45-59 affichent un comportement de navigation plut√¥t √©quilibr√©, tandis que les 60+ se distinguent par une petite proportion d‚Äôutilisateurs manifestant un engagement plus intense.")

    # --- Graphique 4 : Scatter Plot : Nombre de consultations vs Temps de r√©flexion ---
    # Affiche la relation entre le nombre de consultations et le temps de r√©flexion, avec la tranche d'√¢ge en couleur.
    fig_scatter = px.scatter(
        profil_client,
        x='Nb_Consultations',
        y='Temps_Reflexion',
        color='Tranche_Age',
        size='Nb_Consultations',   # pour donner un indice visuel sur le nombre de consultations
        title="Nombre de consultations vs Temps de r√©flexion par tranche d'√¢ge",
        hover_data=['ID_Client'],  # ajustez en fonction de vos colonnes disponibles
        labels={"Tranche_Age": "Tranches d'√¢ge"}
    )

    fig_scatter.update_layout(
        title={
            'x': 0.5,   
            'xanchor': 'center',
            'font': {'size': 24}
        },
        xaxis_title ="Nombre de consultations",
        yaxis_title="Temps de r√©flexion (jours)"
    )

    fig_scatter.update_traces(
        hovertemplate=(
        "Nombre de consultations : %{x}<br>"
        "Temps de r√©flexion : %{y} jours")
    )

    st.plotly_chart(fig_scatter, use_container_width=True)

    st.write(" Les clients des tranches 45-59 et Moins de 30 tendent √† consulter la fiche v√©hicule plus fr√©quemment et pr√©sentent √©galement un temps de r√©flexion relativement long, sugg√©rant un engagement approfondi dans leur processus d√©cisionnel. En revanche, la tranche 60+ adopte une approche moins intensive, avec des points situ√©s principalement entre 20 et 80 consultations, indiquant une recherche d'informations plus rapide ou minimale. Enfin, bien que la tranche 30-44 affiche dans l'ensemble un comportement de consultation mod√©r√© (majoritairement entre 20 et 100 consultations), quelques cas extr√™mes avec plus de 140 consultations viennent souligner la pr√©sence de profils tout aussi int√©ress√©s.")

    st.markdown("<h2 style='text-decoration: underline;'>Pr√©f√©rence du v√©hicule</h2>", unsafe_allow_html=True)

    # --- Graphique 5 : Sunburst Chart de la r√©partition des v√©hicules achet√©s par intensit√© de consultation ---
    # Ce graphique permet de visualiser, dans chaque groupe d'intensit√©, la distribution des v√©hicules achet√©s.
    vehicules_par_groupe = (
        profil_client
        .groupby(['Consultation_Intensit√©', 'V√©hicule_Achete'])
        .size()
        .reset_index(name='Count')
    )

    fig_sunburst = px.sunburst(
        vehicules_par_groupe,
        path=['Consultation_Intensit√©', 'V√©hicule_Achete'],
        values='Count',
        title="R√©partition des v√©hicules achet√©s par intensit√© de consultation",
        height=900, 
        width=700 
    )
    fig_sunburst.update_layout(
        title={
            'x': 0.5,   
            'xanchor': 'center',
            'font': {'size': 24}
        }
    )

    # Mise √† jour du survol (hovertext)
    # On r√©cup√®re le trace de la figure (le sunburst est g√©n√©ralement un seul trace)
    sun_trace = fig_sunburst.data[0]
    # Cr√©e une nouvelle liste de hovertemplate pour chaque point
    new_hovertemplates = []
    # Pour chaque point, on v√©rifie si c'est un grand cercle (niveau d'intensit√©)
    # Pour les points de niveau parent, "parent" est une cha√Æne vide.
    for label, parent, val in zip(sun_trace.labels, sun_trace.parents, sun_trace.values):
        if parent == "":  
            # Pour le grand cercle, on affiche uniquement le nombre (Count)
            new_hovertemplates.append(f"Nombre: {val:.0f}<extra></extra>")
        else:
            # Pour les niveaux enfants (les voitures), affiche le nom et le nombre
            new_hovertemplates.append(f"V√©hicule: {label}<br>Nombre: {val:.0f}<extra></extra>")

    # Appliquer cette liste de hovertemplate sur le trace
    sun_trace.hovertemplate = new_hovertemplates

    st.plotly_chart(fig_sunburst, use_container_width=True)
    st.write("*Cliquez sur un niveau d'intensit√© de consultation pour plus de d√©tails.*")

    st.write("On observe que certains mod√®les apparaissent dans plusieurs niveaux d'intensit√©. Par exemple, le mod√®le Peugeot 2008 Essence figure dans la cat√©gorie 'Elev√©' (3 fois), appara√Æt massivement dans 'Faible' (20 fois), se pr√©sente √©galement dans 'Moyen' (11 fois) et dans 'Tr√®s √©lev√©' (5 fois). Cela peut sugg√©rer que ce mod√®le int√©resse un large √©ventail de clients, qu'ils consultent peu ou beaucoup, ce qui indique peut-√™tre une forte attractivit√© globale. Pour la cat√©gorie 'Faible', la diversit√© est importante et les effectifs sont souvent plus √©lev√©s (par exemple, Peugeot 2008 Essence avec 20 consultations, Peugeot 208 Essence avec 19). Cela pourrait indiquer que, pour ces mod√®les populaires, un grand nombre de clients consulte la fiche v√©hicule de mani√®re ponctuelle avant d'acheter, ce qui peut traduire une d√©cision d'achat rapide ou une confiance pr√©alable dans la marque. Dans la cat√©gorie 'Moyen', le comportement est interm√©diaire. Des mod√®les comme Peugeot 2008 Essence (11 consultations) et d'autres mod√®les Peugeot ou Renault apparaissent avec des effectifs mod√©r√©s, sugg√©rant que ces v√©hicules int√©ressent des clients qui h√©sitent ou cherchent √† comparer avant de prendre leur d√©cision. Dans la cat√©gorie 'Elev√©', on note la pr√©sence de mod√®les comme la Peugeot 3008 Diesel/Essence et la Renault Clio 5 Essence, mais avec des effectifs relativement faibles (entre 1 et 3). Cela pourrait signifier qu'un nombre restreint de clients, manifestant un fort engagement en termes de consultations, porte un int√©r√™t soutenu √† un ensemble sp√©cifique de mod√®les. La cat√©gorie 'Tr√®s √©lev√©' regroupe quelques mod√®les (notamment certains Peugeot et Renault) avec de faibles effectifs √©galement. Enfin, par exmeple, le Volkswagen Tiguan Diesel est recens√© uniquement dans la cat√©gorie '√âlev√©', tandis que le Hyundai i30 Fastback Essence et le Seat Ateca Diesel se retrouvent exclusivement dans la cat√©gorie 'Tr√®s √©lev√©'. Ces observations sugg√®rent que ces mod√®les mobilisent l'attention d'un segment sp√©cifique de clients particuli√®rement exigeants.")


    # ----- Tableau 1 : Prix moyen par intensit√© de consultation -----
    # Cr√©ation du DataFrame avec les donn√©es fournies
    df_prix = pd.DataFrame({
        "Consultation_Intensit√©": ["Faible", "Moyen", "Elev√©","Tr√®s √©lev√©"],
        "PRIX_VENTE_TTC_COMMANDE": [ 20528.468571, 21255.000000, 23227.222222, 23040.473684]
    })


    # ----- Tableau 2 : Distribution (%) des types de carburant par intensit√© de consultation -----
    # Cr√©ation du DataFrame avec les donn√©es fournies
    df_carburant = pd.DataFrame({
        "Consultation_Intensit√©": ["Faible", "Moyen", "Elev√©", "Tr√®s √©lev√©"],
        "Diesel": [26.3, 26.0, 33.3, 15.8],
       "Essence": [73.7, 74.0, 66.7, 84.2]
    })

    

    df_prix.rename(columns={
        "Consultation_Intensit√©": "Niveau de consultation",
        "PRIX_VENTE_TTC_COMMANDE": "Prix de vente moyen TTC (‚Ç¨)"
    }, inplace=True)

    # Pour le DataFrame des carburants
    df_carburant.rename(columns={
        "Consultation_Intensit√©": "Niveau de consultation",
        "Diesel": "Diesel (%)",
        "Essence": "Essence (%)"
    }, inplace=True)

    # On d√©finit "Consultation_Intensit√©" comme index pour une pr√©sentation assimilable au tableau fourni
    df_prix.set_index("Niveau de consultation", inplace=True)
    df_carburant.set_index("Niveau de consultation", inplace=True)
    
    col1, col2 = st.columns(2)
    with col1:
        st.write("### Prix moyen par intensit√© de consultation")
        st.write(" ")
        st.write(" ")
        st.table(df_prix.style.format({"Prix de vente moyen TTC (‚Ç¨)": "{:,.2f}"}))
        st.write("On constate qu‚Äôune tendance g√©n√©rale s‚Äô√©tablit entre le niveau d‚Äôintensit√© de consultation et le prix de vente moyen TTC. Les v√©hicules dont la fiche est consult√©e de mani√®re ¬´ Faible ¬ª affichent un prix moyen de 20‚ÄØ528,47 ‚Ç¨, tandis que ce prix passe √† 21‚ÄØ255,00 ‚Ç¨ dans la cat√©gorie ¬´ Moyen ¬ª. La mont√©e se poursuit de fa√ßon plus marqu√©e pour la cat√©gorie ¬´ Elev√© ¬ª, o√π le prix moyen atteint 23‚ÄØ227,22 ‚Ç¨, sugg√©rant ainsi que les v√©hicules plus co√ªteux sont susceptibles de susciter un int√©r√™t plus pouss√© et un examen plus attentif. Cependant, le groupe ¬´ Tr√®s √©lev√© ¬ª montre une l√©g√®re baisse avec un prix moyen de 23‚ÄØ040,47 ‚Ç¨, indiquant qu‚Äôau-del√† d‚Äôun seuil d‚Äôintensit√©, le prix ne continue pas n√©cessairement d‚Äôaugmenter.")

    with col2:
        st.write("### Distribution des types de carburant par intensit√© de consultation")
        st.table(df_carburant.style.format({"Diesel (%)": "{:.1f}", "Essence (%)": "{:.1f}"}))
        st.write("Ces chiffres sugg√®rent que, pour les consultations mod√©r√©es (Faible et Moyen), les comportements de recherche sont similaires pour les deux types de motorisation. L'int√©r√™t pour le Diesel augmente l√©g√®rement lorsque les consultations s'intensifient (Elev√©), ce qui pourrait indiquer une pr√©f√©rence ou une recherche plus pouss√©e pour certains mod√®les Diesel. Cependant, dans le groupe des consultations ¬´ Tr√®s √©lev√©es ¬ª, l'int√©r√™t se focalise quasiment exclusivement sur les v√©hicules √† Essence, signalant peut-√™tre des caract√©ristiques ou des avantages distinctifs per√ßus sur ces mod√®les par les clients les plus engag√©s.")

    st.title("Conclusion de l'hypoth√®se")

    st.write("L'analyse men√©e confirme que les clients qui consultent intens√©ment une fiche v√©hicule pr√©sentent des comportements et des profils distincts de ceux qui la consultent moins fr√©quemment.")
    st.write("En effet, en moyenne, plus le nombre de consultations est √©lev√©, plus le temps de r√©flexion s‚Äôallonge. Ainsi, les clients affichant une forte intensit√© de consultation s‚Äôengagent plus longuement dans leur r√©flexion. Par ailleurs, l'analyse par tranche d'√¢ge r√©v√®le des comportements distincts, avec les clients de moins de 30 ans adoptant une approche polaris√©e, oscillant entre une consultation limit√©e et un engagement marqu√© sans passer par la cat√©gorie '√âlev√©', alors que les tranches 30-44 et 45-59 pr√©sentent un comportement de navigation relativement √©quilibr√© et que la tranche 60+ se distingue par une pr√©dominance de consultations en 'Faible' accompagn√©e d'une proportion l√©g√®rement sup√©rieure dans la cat√©gorie '√âlev√©'. Ainsi, les tranches d'√¢ge 'Moins de 30' et 45-59 ans semblent regarder la fiche v√©hicule le plus intensivement.")
    st.write("De plus, certains mod√®les, tels que le Peugeot 2008 Essence, apparaissent dans plusieurs cat√©gories d'intensit√©, indiquant une attractivit√© globale qui suscite √† la fois des consultations ponctuelles et des recherches plus approfondies. Par ailleurs, d'autres v√©hicules se distinguent en n'apparaissant que dans les cat√©gories '√âlev√©' et 'Tr√®s √©lev√©'. Ainsi, le Volkswagen Tiguan Diesel est recens√© uniquement dans la cat√©gorie '√âlev√©', tandis que le Hyundai i30 Fastback Essence et le Seat Ateca Diesel se retrouvent exclusivement dans la cat√©gorie 'Tr√®s √©lev√©'. Ces observations renforcent l'hypoth√®se selon laquelle les clients ayant consult√© intens√©ment une fiche v√©hicule pr√©sentent un profil distinct.")
    st.write("Ensuite, une analyse des prix r√©v√®le que les v√©hicules dont la fiche est consult√©e intens√©ment tendent √† √™tre plus on√©reux, sugg√©rant qu‚Äôun investissement financier sup√©rieur implique une recherche d'information plus approfondie. Ainsi, on constate que les clients qui explorent davantage les fiches v√©hicules sont surtout attir√©s par des mod√®les affichant un prix de vente moyen plus √©lev√©.")
    st.write("Enfin, l'analyse de la motorisation renforce l'hypoth√®se en montrant que les comportements varient selon l'intensit√© de consultation. Pour des niveaux faibles et moyens, la r√©partition Diesel/Essence reste stable, tandis qu'une pr√©f√©rence pour le Diesel se manifeste dans la cat√©gorie '√âlev√©' avant de dispara√Ætre en faveur de l'Essence dans la cat√©gorie 'Tr√®s √©lev√©'.")

    if switch_voiture:
        rain(emoji="üöó", font_size=70, falling_speed=3.5, animation_length=600)

page_2.__name__ = "Hypoth√®se Consultation x Profil"
            
def page_3():
    warnings.filterwarnings("ignore")
    st.title("Analyse des pr√©f√©rences de couleurs selon l'√¢ge")

    # Introduction
    st.markdown("""
    Dans cette section, nous analysons les pr√©f√©rences de couleurs des v√©hicules en fonction de l'√¢ge des clients.  
    Nous allons examiner :
    - La r√©partition des couleurs par tranche d'√¢ge.
    - L'√©volution continue des pr√©f√©rences de couleurs avec l'√¢ge.
    - Les r√©sultats d'une analyse de r√©gression logistique pour comprendre l'impact de l'√¢ge sur le choix des couleurs.
    """)

    # Charger les donn√©es
    df = pd.read_csv('table_full.csv')

    # Standardiser les couleurs
    df = reg_age_couleur.standardize_colors(df)

    # Cr√©er les tranches d'√¢ge
    df = reg_age_couleur.create_age_groups(df)

    # Section 1 : R√©partition des couleurs par tranche d'√¢ge
    st.subheader("1. R√©partition des couleurs par tranche d'√¢ge")
    st.write("Nous analysons ici la r√©partition des couleurs standardis√©es pour chaque tranche d'√¢ge.")

    fig_heatmap, fig_barplots, crosstab_pct = reg_age_couleur.analyze_colors_by_age(df)

    # Afficher la heatmap
    st.write("**Heatmap des pourcentages de couleurs par tranche d'√¢ge :**")
    st.plotly_chart(fig_heatmap, use_container_width=True)

    st.write("""
    **Interpr√©tation :**  
    La heatmap montre les pourcentages de chaque couleur pour diff√©rentes tranches d'√¢ge.  
    On observe que certaines couleurs, comme le gris et le noir, sont populaires dans presque toutes les tranches d'√¢ge, tandis que d'autres, comme le rouge ou le bleu, varient davantage selon l'√¢ge. En efet le rouge semble √™tre plus populaire chez les personnes √¢g√©es que chez les jeunes, alors que le bleu lui est plus populaire chez les jeunes que chez les personnes ag√©es.
    """)

    # Afficher les barplots
    st.write("**Barplots des couleurs par tranche d'√¢ge :**")
    st.plotly_chart(fig_barplots, use_container_width=True)
    st.write("""
    **Interpr√©tation :**  
    Les barplots permettent de visualiser les proportions exactes de chaque couleur pour chaque tranche d'√¢ge.  
    On continue √† observer la pr√©f√©rence pour le gris noir et blanc √† travers les tranches d'√¢ge. On note √©galement que les 18-25 ans ach√®tent beaucoup moins de voiture que les autres tranches d'√¢ges. Les autres tranches d'√¢ges ach√®tent environ dix fois plus que les 18-25 ans.
    """)

    # Section 2 : √âvolution continue des pr√©f√©rences de couleurs avec l'√¢ge
    st.subheader("2. √âvolution continue des pr√©f√©rences de couleurs avec l'√¢ge")
    st.write("Nous visualisons ici l'√©volution des pr√©f√©rences de couleurs en fonction de l'√¢ge des clients, avec des tranches d'√¢ge plus fines.")

    color_evolution = reg_age_couleur.plot_color_preferences_by_age_continuous(df)

    st.write("**Graphique de l'√©volution continue des pr√©f√©rences de couleurs :**")
    st.plotly_chart(color_evolution, use_container_width=True)
    st.write("""
    **Interpr√©tation :**  
    Ce graphique montre une √©volution plus d√©taill√©e des pr√©f√©rences de couleurs avec l'√¢ge.  
    On remarque que certaines couleurs, comme le blanc, augmentent en popularit√© avec l'√¢ge, tandis que d'autres, comme le rouge, diminuent progressivement.
    """)


    # Section 3 : Analyse de r√©gression logistique
    st.subheader("3. Analyse de r√©gression logistique")
    st.write("""
    Nous utilisons une r√©gression logistique pour comprendre l'impact de l'√¢ge sur le choix des couleurs.  
    Les r√©sultats incluent :
    - Les coefficients de r√©gression (log-odds).
    - Les odds ratios pour interpr√©ter l'effet de l'√¢ge sur chaque couleur.
    """)

    # Obtenir les r√©sultats et les graphiques interactifs
    # La fonction `perform_regression_analysis` retourne :
    # - Un DataFrame contenant les coefficients, odds ratios, p-values et leur significativit√©
    # - Deux graphiques interactifs : un pour les coefficients et un pour les odds ratios
    regression_results, fig_coefficients, fig_odds_ratios = reg_age_couleur.perform_regression_analysis(df)

    # Afficher le graphique interactif des coefficients de r√©gression
    st.write("**Graphique des coefficients de r√©gression :**")
    
    st.plotly_chart(fig_coefficients, use_container_width=True)
    st.write("Ce graphique montre l'effet de l'√¢ge sur la probabilit√© de choisir chaque couleur. Les barres positives indiquent que l'√¢ge augmente la probabilit√© de choisir une couleur, tandis que les barres n√©gatives indiquent que l'√¢ge diminue cette probabilit√©. Les barres plus fonc√©es sont celles qui sont statistiquement significatives ainsi plus on viellit plus on a de chance lorsqu'on ach√®te une voiture d'en choisir une blanche et on a moins de chance d'en choisir une noir ou bleu.")
    
    
    st.write("**Graphique des odds ratios :**")
    st.plotly_chart(fig_odds_ratios, use_container_width=True)
    st.write("Ce graphique montre l'impact relatif de l'√¢ge sur les chances de choisir chaque couleur. Un odds ratio sup√©rieur √† 1 indique que l'√¢ge augmente les chances de choisir une couleur, tandis qu'un odds ratio inf√©rieur √† 1 indique que l'√¢ge diminue ces chances. Ici les barres fonc√©s repr√©sentent les couleurs qui sont significativement influenc√©es par l'√¢ge. Ainsi, on confirme le constat fait pr√©c√©dement qui est que l'age influence positivement le choix de la couleur blanche et n√©gativement le choix des couleurs noire et bleue. Ainsi plus on viellit plus on a de chance de choisir une voiture blanche et moins on a de chance de choisir une voiture noir ou bleu.")
    
    # Afficher les r√©sultats sous forme de tableau interactif
    st.write("**R√©sum√© des r√©sultats de r√©gression :**")
    # Le tableau affiche les coefficients, odds ratios, p-values et si l'effet est significatif
    st.dataframe(regression_results)
    st.write("On voit ici r√©sum√© les r√©sultats de la r√©gression logistique. On voit que les couleurs noire et bleu sont significativement influenc√©es par l'√¢ge, tandis que les autres couleurs ne le sont pas. En effet on voit que les p-values des couleurs noir et bleu sont inf√©rieures √† 0.05, ce qui signifie qu'il y a une relation significative entre l'√¢ge et le choix de ces couleurs. La colonne 'Significatif' indique si l'effet est significatif (1) ou non (0).La colonne 'coefficient' indique l'effet de l'√¢ge sur le choix de la couleur, et la colonne 'odds_ratio' indique l'impact relatif de l'√¢ge sur les chances de choisir cette couleur. Par exemple, un odds ratio de 0.5 pour le noir signifie qu'avec chaque ann√©e d'√¢ge suppl√©mentaire, les chances de choisir une voiture noire diminuuent de 50%. De m√™me un odds ratio de 1.5 pour le blanc signifie qu'avec chaque ann√©e d'√¢ge suppl√©mentaire, les chances de choisir une voiture blanche augmentent de 50%.")
    # Conclusion de la section
    st.subheader("Conclusion")
    st.write("""
    En conclusion, nous avons observ√© des tendances int√©ressantes dans les pr√©f√©rences de couleurs selon l'√¢ge des clients. Nous avons vu des tendances g√©n√©rales, comme la popularit√© du blanc et du noir, mais aussi des variations plus fines selon les tranches d'√¢ge. 
    Les r√©sultats de la r√©gression logistique montrent que certaines couleurs sont significativement influenc√©es par l'√¢ge comme le blanc, le noir et le bleu tandis que d'autres ne le sont pas.  
    Ces informations peuvent √™tre utilis√©es pour mieux cibler les clients en fonction de leur profil. 
    """)

page_3.__name__ = "Hypoth√®se Age x Couleur"

def page_4():
    
    
    st.title("La zone g√©ographique a t'elle un impact sur le choix du v√©hicule ?")

    ##Explication de l'hypoth√®se
    st.write("Nous allons chercher √† savoir ici si la zone g√©ographique d'un client a un impact sur le type de voiture qu'il choisit. Pour cela, nous allons s√©parer les clients en 5 clusters et analyser la r√©partition des v√©hicules par zone.")
    st.write("Nous allons utiliser les donn√©es de localisation des clients et les croiser avec les donn√©es de v√©hicules pour voir s'il y a des tendances g√©ographiques dans le choix des v√©hicules. Ainsi, nous avons d√©termin√© trois principales caract√©ristiques de voitures : la marque, le type de voiture et le type d'√©nergie utilis√©.")
    st.write("Nous allons √©galement utiliser des tests statistiques pour v√©rifier si les diff√©rences observ√©es sont significatives.")
    
    st.image("Carte.PNG", caption="Carte de France avec les clusters g√©ographiques", use_container_width=True)


    # Display the Plotly map in Streamlit
   
    st.write("Cette carte montre la r√©partition g√©ographique des 5 clusters.")
    st.write("Les clusters sont √©labor√©s gr√¢ce √† la m√©thode KMeans, qui regroupe les clients en fonction de leurs coordonn√©es g√©ographiques. Chaque cluster est repr√©sent√© par une couleur diff√©rente sur la carte.")
    st.write("En survolant les points, vous pouvez voir le nom de la commune associ√©e √† chaque point. Cela permet d'identifier facilement les zones g√©ographiques o√π se trouvent les clients.")
    st.write("Nous allons maintenant analyser la r√©partition des v√©hicules par cluster.")
    
    # Energy distribution by cluster
    st.subheader("R√©partition des √©nergies par cluster")
    st.image("√©nergiesPNG.PNG", caption="R√©partition des √©nergies/carburant par cluster", use_container_width=True)
    

    st.write("Ce graphique montre la r√©partition des types d'√©nergie par cluster. On voit que les tendances dans chaque cluster suivent la tendance g√©n√©rale des ventes vues dans la partie statistique descriptives. Ainsi dans chaque cluster, on voit qu'il y a une majorit√© de voitures essence et les voitures √©lectriques repr√©sentent une petite fraction des ventes. On remarque √©galement que les clusters Nord+Paris et Sud-Est ont tout les deux beaucoup de ventes d'hybrides alors que les autres clusters ont tendance √† avoir plus de voitures diesel que d'hybrides.")
    

    # Top marques by cluster
    st.subheader("R√©partition des marques par cluster")

    st.image("marque.PNG", caption="R√©partition des marques par cluster", use_container_width=True)
    st.write("On repr√©sente ici la distribution des 5 marques les plus populaires de chaque clusters. On voit que les tendances dans chaque cluster suivent √©galement la tendance g√©n√©rale des ventes vues dans la partie statistique descriptives. Ainsi dans chaque cluster, il y a une majorit√© de voitures Citro√´n et Peugeot. On peut l'expliquer par le fait que ce sont des marques fran√ßaises et qu'elles sont donc plus populaire dans l'ensemble de la France. On remarque que le Sud-Est est la seule r√©gion avec des Volkswagen dans son Top 5. De m√™me le Nord-Est est la seule r√©gion avec la marque Opel et le Sud-Ouest est le seul √† avoir Nissan dans son top 5. Ainsi dans chaque cluster on retrouve toujours les marques Citro√´n, Peugeot et Dacia, puis 2 autres marques qui varient selon le cluster dans lequel on se trouve. ")

    # Category distribution by cluster
    st.subheader("R√©partition des cat√©gories par cluster")
    st.image("cat√©gorie.PNG", caption="R√©partition des cat√©gories par cluster", use_container_width=True)
    st.write("Cette visualisation montre la r√©partition des cat√©gories par cluster. Dans chaque cluster, on voit une majorit√© de 4x4 SUV et citadine puis en plus faible quantit√© on trouve des monospaces, des berlines compactes et des breaks. On remarque et c'est le cas pour l'ensemble des graphiques que le Nord et Paris repr√©sentent une grande partie des ventes, puis on a le Sud-Est, ensuite le Nord-Est,le Sud-Ouest et le Nord-Ouest qui repr√©sentent moins de ventes. ")

# 5. Tests statistiques
    # Display p-values in scientific notation
    st.subheader("R√©sultats des tests d'ind√©pendance (p-value):")

    st.write("Dans cette partie nous allons d√©terminer si la zone g√©ographaphique a une influence sur la marque et le type d'√©nergie de la voiture √† l'aide des r√©sultats de test de chi2. Le test de chi2 nous permet de d√©terminer si deux variables qualitatives sont ind√©pendantes ou non.")
    
    st.markdown("**Marque** :  ")
    st.write("Nous avons donc test√© l'hypoth√®se nulle : La variable marque est ind√©pendante du cluster g√©ographique auquel le client appartient. Autrement dit on teste si la distribution des diff√©rentes marque achet√© par les clients est la m√™me aux quatre coin de la France. L'hypoth√®se alternative est donc la suivante : La variable marque n'est pas ind√©pendante du cluster g√©ographique et donc la distribution des marques de voitures achet√©s par les clients n'est pas la m√™me selon o√π se trouve en France.")
    st.markdown("""Ici la pvalue vaut **2.27e-249**, elle est donc inf√©rieur √† 5%. En statistique cela signifie que l'on peut rejeter l'hypoth√®se nulle √† un niveau de confiance de 95%. Ainsi nous avan√ßons qu'il est possible que la localisation du client a un impact sur la marque de voiture qu'il va choisir.""")
    
    st.markdown("**√ânergie :**  ")
    st.write("""Nous avons donc test√© l'hypoth√®se nulle : La variable √©nergie est ind√©pendante du cluster g√©ographique auquel le client appartient. Autrement dit on teste si la distribution des diff√©rentes √©nergies achet√© par les clients est la m√™me aux quatre coin de la France. L'hypoth√®se alternative est donc la suivante : La variable √©nergie n'est pas ind√©pendante du cluster g√©ographique et donc la distribution des √©nergies de voitures achet√©s par les clients n'est pas la m√™me selon o√π on se trouve en France.""")
    st.write("""Ici la pvalue vaut **1.23e-63**, elle est donc inf√©rieur √† 5%. En statistique cela signifie que l'on peut rejeter l'hypoth√®se nulle √† un niveau de confiance de 95%. Ainsi nous avan√ßons qu'il est possible que la localisation du client a un impact sur le type d'√©nergie de voiture qu'il va choisir.""")

    st.markdown("**Cat√©gorie** :  ")
    st.write("Nous avons donc test√© l'hypoth√®se nulle : La variable cat√©gorie est ind√©pendante du cluster g√©ographique auquel le client appartient. Autrement dit on teste si la distribution des diff√©rentes cat√©gories achet√© par les clients est la m√™me aux quatre coin de la France. L'hypoth√®se alternative est donc la suivante : La variable cat√©gorie n'est pas ind√©pendante du cluster g√©ographique et donc la distribution des cat√©gories de voitures achet√©s par les clients n'est pas la m√™me selon o√π on se trouve en France.")
    st.markdown("""Ici la pvalue vaut **1.41e-32**, elle est donc inf√©rieur √† 5%. En statistique cela signifie que l'on peut rejeter l'hypoth√®se nulle √† un niveau de confiance de 95%. Ainsi nous avan√ßons qu'il est possible que la localisation du client a un impact sur la cat√©gorie de voiture qu'il va choisir.""") 

    st.markdown("**Conclusion** :")
    st.write("En conclusion, nous avons pu voir que la localisation du client a un impact sur la marque, le type et le type d'√©nergie consomm√© de la voiture qu'il va acheter. Cependant, il est important de noter que ces r√©sultats sont bas√©s sur des donn√©es historiques et qu'ils ne garantissent pas que ces tendances se poursuivront √† l'avenir. Il est donc important de continuer √† surveiller les tendances du march√© et d'adapter les strat√©gies en cons√©quence.")

page_4.__name__ = "Hypoth√®se Localisation x type voiture"

def page_recommandations():
    st.title("Recommandations et Communication")

    # Introduction
    st.markdown("""
    Cette section propose des recommandations strat√©giques bas√©es sur les analyses pr√©c√©dentes et les statistiques descriptives.  
    Ces recommandations visent √† optimiser les ventes, am√©liorer l'exp√©rience client et renforcer la communication marketing d'Aramisauto.
    """)

    # Bilan des analyses
    st.subheader("Bilan des analyses")
    st.write("""
    Les analyses effectu√©es ont permis de mettre en √©vidence plusieurs tendances et comportements cl√©s :
    - **Statistiques descriptives** :
        - Les SUV/4x4 et citadines dominent les ventes, suivis par les monospaces et berlines compactes.
        - Les v√©hicules essence sont majoritaires, mais les hybrides gagnent en popularit√© dans certaines r√©gions.
        - Les marques fran√ßaises (Peugeot, Citro√´n) sont les plus vendues, avec des variations r√©gionales.
        - Les couleurs neutres (gris, blanc, noir) sont les plus populaires, mais des nuances apparaissent selon l'√¢ge.
    - **Hypoth√®se Prix x Options** :
        - Plus un v√©hicule est √©quip√©, plus son prix est √©lev√©. Certains √©quipements (Apple CarPlay, radar de recul) influencent davantage le prix.
    - **Hypoth√®se Consultation x Profil** :
        - Les clients qui consultent intens√©ment une fiche v√©hicule tendent √† acheter des mod√®les plus chers et √† prendre plus de temps pour d√©cider.
        - Les jeunes adoptent une approche polaris√©e (consultations faibles ou tr√®s √©lev√©es), tandis que les tranches 30-59 ans montrent un comportement plus √©quilibr√©.
    - **Hypoth√®se Age x Couleur** :
        - Les pr√©f√©rences de couleurs √©voluent avec l'√¢ge : les jeunes pr√©f√®rent le bleu et le noir, tandis que les seniors privil√©gient le blanc.
    - **Hypoth√®se Localisation x Type de voiture** :
        - La localisation influence les choix de marques, types de v√©hicules et √©nergies. Par exemple, les hybrides sont populaires dans le Sud-Est, tandis que le diesel reste dominant dans d'autres r√©gions.
    """)

    # Recommandations strat√©giques
    st.subheader("Recommandations strat√©giques")
    st.write("""
    Sur la base des r√©sultats obtenus, voici nos recommandations pour optimiser les ventes et la communication :
    """)

    st.markdown("### 1. Personnalisation de l'offre")
    st.write("""
    - **Adapter les stocks aux pr√©f√©rences locales** :
        - Augmenter la disponibilit√© des hybrides dans le Sud-Est et des diesels dans le Nord.
        - Proposer davantage de SUV/4x4 et citadines, qui dominent les ventes.
    - **Cibler les jeunes clients** :
        - Mettre en avant des mod√®les noirs ou bleus pour les 18-25 ans.
        - Proposer des v√©hicules √©quip√©s de technologies modernes (Apple CarPlay, radar de recul).
    - **Offrir des options personnalis√©es** :
        - Permettre aux clients de configurer leur v√©hicule (couleur, √©quipements) pour r√©pondre √† leurs attentes sp√©cifiques.
    """)

    st.markdown("### 2. Communication cibl√©e")
    st.write("""
    - **Campagnes marketing r√©gionales** :
        - Promouvoir les hybrides dans le Sud-Est et les diesels dans le Nord.
        - Adapter les messages publicitaires aux pr√©f√©rences locales (ex. : SUV dans les zones rurales, citadines en milieu urbain).
    - **Mise en avant des marques fran√ßaises** :
        - Capitaliser sur la popularit√© de Peugeot et Citro√´n pour renforcer la confiance des clients.
    """)

    st.markdown("### 3. Optimisation de l'exp√©rience utilisateur")
    st.write("""
    - **Am√©liorer le moteur de recherche du site** :
        - Ajouter des filtres pour trier les v√©hicules par couleur, type d'√©nergie ou cat√©gorie.
    - **Proposer des recommandations personnalis√©es** :
        - Utiliser les donn√©es des clients pour sugg√©rer des v√©hicules adapt√©s √† leur profil (√¢ge, localisation, comportement de consultation).
    """)

    st.markdown("### 4. Fid√©lisation des clients")
    st.write("""
    - **Programmes de fid√©lit√©** :
        - Offrir des r√©ductions ou des avantages aux clients fid√®les (ex. : options gratuites, entretien offert).
    - **Suivi post-achat** :
        - Envoyer des enqu√™tes de satisfaction et des offres personnalis√©es pour inciter √† un nouvel achat et avoir plus de donn√©es pour construire de nouvelles hypoth√®ses et affiner le profiling.
    """)

    st.markdown("### 5. Strat√©gie de tarification")
    st.write("""
    - **Valoriser les √©quipements premium** :
        - Mettre en avant les √©quipement d'un v√©hicule, qui justifient un prix plus √©lev√©.
    - **Offrir des promotions cibl√©es** :
        - R√©ductions sur les mod√®les moins populaires dans certaines r√©gions pour stimuler les ventes.
    """)

    # Conclusion
    st.subheader("Conclusion")
    st.write("""
    En mettant en ≈ìuvre ces recommandations, Aramisauto peut mieux r√©pondre aux attentes de ses clients, augmenter ses ventes et renforcer sa position sur le march√©.  
    Une strat√©gie bas√©e sur les donn√©es permet non seulement d'optimiser les performances actuelles, mais aussi de s'adapter aux √©volutions futures des pr√©f√©rences des consommateurs.
    """)
page_recommandations.__name__ = "Recommandations et Communication"


pg = st.navigation({
    "Analyse du profil des clients Aramisauto" : [bienvenue, ensemble, page_1, page_2, page_3, page_4, page_recommandations],
})


pg.run()


