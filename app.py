import streamlit as st
from streamlit_extras.let_it_rain import rain
from streamlit_extras.customize_running import center_running
import pandas as pd
import numpy as np
import random 
import ydata
import seaborn as sns
from streamlit_pandas_profiling import st_profile_report
import matplotlib.pyplot as plt
import geopandas as gpd
from sklearn.preprocessing import LabelEncoder
from sklearn.cluster import KMeans
from scipy.stats import chi2_contingency
import requests
import plotly.express as px
from matplotlib.colors import LinearSegmentedColormap, to_hex
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
import statsmodels.api as sm
import statsmodels.formula.api as smf
from plotly.subplots import make_subplots
import warnings

import reg_age_couleur

warnings.filterwarnings("ignore")
table_full = pd.read_csv("table_full.csv")
table_vehicle = pd.read_csv("table_vehicule.csv")

def bienvenue():
    st.subheader("Bienvenue sur l'application d'analyse du profil des clients Aramisauto")

    st.markdown("<br>", unsafe_allow_html=True)

    # Ajout logo
    col1, col2, col3 = st.columns(3)
    with col2:
        st.image("logo_aramisauto.jpg", width=300)

    st.markdown("<br>", unsafe_allow_html=True)

    # Contexte et objectifs
    st.markdown(
        """
        <div style="font-size: 20px; line-height:1.4;">

        **Contexte :**  

        Aramisauto souhaite mieux comprendre le profil de ses clients pour optimiser sa strat√©gie marketing.  
        Nous analysons des donn√©es internes, enrichies avec des sources externes, pour obtenir une vue compl√®te du comportement de nos clients.



        **Objectifs du projet :**

        - **Analyser les donn√©es internes** pour identifier les comportements et les pr√©f√©rences des clients.
        - **Enrichir les donn√©es** avec des informations externes afin d'avoir une compr√©hension globale.
        - **D√©velopper une appli interactive** pour visualiser et interpr√©ter ces donn√©es.
        </div>
        """, 
        unsafe_allow_html=True
    )

    st.markdown("<br>", unsafe_allow_html=True)
    
    # Instructions de navigation
    st.markdown("""
        <div style="font-size: 20px; line-height:1.4;">

        **Navigation :**  
        attendre que √ßa soit fini mais en gros on parle des hypoth√®ses
        </div>
        """,
    unsafe_allow_html=True
    )

    st.markdown("<br>", unsafe_allow_html=True)
    
    # Information compl√©mentaire
    st.info("Cette application a √©t√© d√©velopp√©e dans le cadre du projet Datamining pour l'ann√©e 2024/2025.")
    
    
    # st.subheader("Statistiques descriptives")
    # st.write(table_full.describe(include='all'))
    
    
    if switch_voiture:
        rain(emoji="üöó", font_size=70, falling_speed=3, animation_length=600)

bienvenue.__name__ = "Accueil" # change le nom dans le sidebar


    
def vue_d_ensemble():
    st.title("Statistiques descriptives")

    #metrics clients
    st.markdown("<h1 style='text-decoration: underline;'>Statistiques clients</h1>", unsafe_allow_html=True)
    col1_1, col1_2, col1_3, col1_4 = st.columns(4)
    
    col1_1.metric("√Çge moyen des clients", f"{table_full['age_client'].mean():.1f} ans")
    col1_2.metric("Anciennet√© moyenne", f"{table_full['anciennete'].mean():.1f} ans")
    col1_3.metric("Nombre de femmes", table_full['GENDER'].value_counts().get('F', 0))
    col1_4.metric("Nombre d'hommes", table_full['GENDER'].value_counts().get('H', 0))

    # Graphiques clients
    col_client_1, col_client_2 = st.columns(2)

    with col_client_1.container():
        st.subheader("R√©partition par tranches d'√¢ge")
        fig1, ax1 = plt.subplots()
        ax1.hist(table_full['age_client'].dropna(), bins=10, color=color1, edgecolor='black')
        ax1.set_xlabel("√Çge")
        ax1.set_ylabel("Nombre de clients")
        ax1.set_title("Distribution de l'√¢ge des clients")
        st.pyplot(fig1)

    with col_client_2.container():
        st.subheader("R√©partition par genre")
        fig2, ax2 = plt.subplots()
        gender_counts = table_full['GENDER'].value_counts()
        ax2.pie(gender_counts, labels=["Hommes", "Femmes"], autopct='%1.1f%%', startangle=90, 
            colors=[color1, color2], wedgeprops={'edgecolor': 'black'})
        ax2.axis('equal')
        st.pyplot(fig2)

    
    #metrics voitures
    st.markdown("<h1 style='text-decoration: underline;'>Statistiques voitures</h1>", unsafe_allow_html=True)
    
    col2_1, col2_2, col2_3 = st.columns(3)

    col2_1.metric("Nombre de voitures disponibles :", table_vehicle.shape[0])
    col2_2.metric("Nombre de mod√®les de voitures :", table_vehicle['VEHICULE_MODELE'].nunique())
    col2_3.metric("Nombre de marques diff√©rentes disponibles :", table_vehicle["VEHICULE_MARQUE"].nunique())
    
    col3_1, col3_2, col3_3 = st.columns(3)
    
    col3_1.metric("Taux de reprise", f"{(table_full['FLAG_REPRISE'].sum() / table_full['FLAG_COMMANDE'].sum() * 100):.1f} %")
    col3_2.metric("Kilom√©trage moyen", f"{table_vehicle['VEHICULE_KM'].mean():,.0f} km")    
    col3_3.metric("Prix moyen TTC", f"{table_full['PRIX_VENTE_TTC_COMMANDE'].mean():,.0f} ‚Ç¨")

    
    col_voitures_1, col_voitures_2 = st.columns(2)
    #repartition par marque
    with col_voitures_1.container():
        st.subheader("Nombre de voitures par marque")
        qtte_marque = st.slider("Choisissez le nombre de marques √† afficher", 1, table_vehicle['VEHICULE_MARQUE'].nunique(), 10)
        fig5, ax5 = plt.subplots()
        top_marques = table_vehicle['VEHICULE_MARQUE'].value_counts().head(qtte_marque)
        ax5.barh(top_marques.index[::-1], top_marques.values[::-1], color=plt.cm.Blues(np.linspace(0.4, 0.9, 10)))
        ax5.set_xlabel("Nombre de voitures")
        ax5.set_ylabel("Marque")
        st.pyplot(fig5)
        
    #repartion par modele
    with col_voitures_2.container():
        st.subheader("Nombre de voitures par mod√®le")
        qtte_modele = st.slider("Choisissez le nombre de mod√®les √† afficher", 1, table_vehicle['VEHICULE_MODELE'].nunique(), 10)
        fig7, ax7 = plt.subplots()
        top_modeles = table_vehicle['VEHICULE_MODELE'].value_counts().head(qtte_modele)
        ax7.barh(top_modeles.index[::-1], top_modeles.values[::-1], color=plt.cm.Blues(np.linspace(0.4, 0.9, 10)))
        ax7.set_xlabel("Nombre de voitures")
        ax7.set_ylabel("Mod√®le")
        st.pyplot(fig7)
    

    col_voitures_2_1, col_voitures_2_2 = st.columns(2)
    # VO vs VN
    with col_voitures_2_1.container():
        st.subheader("R√©partition des voitures neuves / d'occasions")
        fig6, ax6 = plt.subplots(figsize=(5, 4))
        table_vehicle['VEHICULE_TYPE'].value_counts().plot.pie(autopct='%1.1f%%', startangle=90, ax=ax6, colors=[color1, color2],wedgeprops={'edgecolor': 'black'})
        ax6.set_ylabel('')
        st.pyplot(fig6)

    with col_voitures_2_2.container():
        st.subheader("Prix de vente des v√©hicules")
        nb_bins = st.slider("Nombre de bins", 0, 30, 20)
        fig4, ax4 = plt.subplots()
        prix_vente = table_full['PRIX_VENTE_TTC_COMMANDE'].dropna()
        ax4.hist(prix_vente, bins=nb_bins, color=color1,edgecolor='black')
        ax4.set_xlabel("Prix de vente TTC")
        ax4.set_ylabel("Quantit√©")
        st.pyplot(fig4)
        
    col_voitures_3_1, col_voitures_3_2 = st.columns(2)
    #repartition par carburant
    with col_voitures_3_1.container():
        energy_colors = {'Essence': "#2ecc71",'Diesel': "#FDDB15",'Hybride': "#9900D0",'Electrique': "#2980b9",'Autre': "#A4A4A4"}
        st.subheader("R√©partition des carburants")
        fig3, ax3 = plt.subplots()
        top_energies = table_vehicle['VEHICULE_ENERGIE'].value_counts()
        colors = [energy_colors.get(energy, "#bdc3c7") for energy in top_energies.index]
        ax3.barh(top_energies.index[::-1], top_energies.values[::-1], color=plt.cm.Purples(np.linspace(0.2, 0.9, 10)))
        ax3.set_xlabel("Nombre de voitures")
        ax3.set_ylabel("Carburant")
        st.pyplot(fig3)

    
    if switch_voiture:
        rain(emoji="üöó", font_size=70, falling_speed=3.5, animation_length=600)
        
vue_d_ensemble.__name__ = "Statistiques descriptives"       
        
def page_1():
    st.title("Nom Hypoth√®se")
    st.write("description de l'hypoth√®se vite fait")
    st.write("graphiques/tableaux + interpr√©tations")
    st.write("conclu de l'hypoth√®se")
        
page_1.__name__ = "Hypoth√®se 1"
    
    
def page_2():
    st.title("Nom Hypoth√®se")
    st.write("description de l'hypoth√®se vite fait")
    st.write("graphiques/tableaux + interpr√©tations")
    st.write("conclu de l'hypoth√®se")

page_2.__name__ = "Hypoth√®se 2"
            
def page_3():
    warnings.filterwarnings("ignore")
    st.title("Analyse des pr√©f√©rences de couleurs selon l'√¢ge")

    # Introduction
    st.markdown("""
    Dans cette section, nous analysons les pr√©f√©rences de couleurs des v√©hicules en fonction de l'√¢ge des clients.  
    Nous allons examiner :
    - La r√©partition des couleurs par tranche d'√¢ge.
    - L'√©volution continue des pr√©f√©rences de couleurs avec l'√¢ge.
    - Les r√©sultats d'une analyse de r√©gression logistique pour comprendre l'impact de l'√¢ge sur le choix des couleurs.
    """)

    # Charger les donn√©es
    df = pd.read_csv('table_full.csv')

    # Standardiser les couleurs
    df = reg_age_couleur.standardize_colors(df)

    # Cr√©er les tranches d'√¢ge
    df = reg_age_couleur.create_age_groups(df)

    # Section 1 : R√©partition des couleurs par tranche d'√¢ge
    st.subheader("1. R√©partition des couleurs par tranche d'√¢ge")
    st.write("Nous analysons ici la r√©partition des couleurs standardis√©es pour chaque tranche d'√¢ge.")

    fig_heatmap, fig_barplots, crosstab_pct = reg_age_couleur.analyze_colors_by_age(df)

    # Afficher la heatmap
    st.write("**Heatmap des pourcentages de couleurs par tranche d'√¢ge :**")
    st.plotly_chart(fig_heatmap, use_container_width=True)

    st.write("""
    **Interpr√©tation :**  
    La heatmap montre les pourcentages de chaque couleur pour diff√©rentes tranches d'√¢ge.  
    On observe que certaines couleurs, comme le gris et le noir, sont populaires dans presque toutes les tranches d'√¢ge, tandis que d'autres, comme le rouge ou le bleu, varient davantage selon l'√¢ge. En efet le rouge semble √™tre plus populaire chez les personnes ag√©es que chez les jeunes, alors que le bleu lui est plus populaire chez les jeunes que chez les personnes ag√©es.
    """)

    # Afficher les barplots
    st.write("**Barplots des couleurs par tranche d'√¢ge :**")
    st.plotly_chart(fig_barplots, use_container_width=True)
    st.write("""
    **Interpr√©tation :**  
    Les barplots permettent de visualiser les proportions exactes de chaque couleur pour chaque tranche d'√¢ge.  
    On continue a observer la pr√©f√©rence pour le gris noir et blanc √† travers les tranches d'√¢ges. On note √©galement que les 18-25 ans ach√®tent beaucoup moins de voiture que les autres tranches d'√¢ges. Les autres tranches d'√¢ges ach√®tent environ dix fois plus que les 18-25 ans.
    """)

    # Section 2 : √âvolution continue des pr√©f√©rences de couleurs avec l'√¢ge
    st.subheader("2. √âvolution continue des pr√©f√©rences de couleurs avec l'√¢ge")
    st.write("Nous visualisons ici l'√©volution des pr√©f√©rences de couleurs en fonction de l'√¢ge des clients, avec des tranches d'√¢ge plus fines.")

    color_evolution = reg_age_couleur.plot_color_preferences_by_age_continuous(df)

    st.write("**Graphique de l'√©volution continue des pr√©f√©rences de couleurs :**")
    st.plotly_chart(color_evolution, use_container_width=True)
    st.write("""
    **Interpr√©tation :**  
    Ce graphique montre une √©volution plus d√©taill√©e des pr√©f√©rences de couleurs avec l'√¢ge.  
    On remarque que certaines couleurs, comme le noir, augmentent en popularit√© avec l'√¢ge, tandis que d'autres, comme le rouge, diminuent progressivement.
    """)


    # Section 3 : Analyse de r√©gression logistique
    st.subheader("3. Analyse de r√©gression logistique")
    st.write("""
    Nous utilisons une r√©gression logistique pour comprendre l'impact de l'√¢ge sur le choix des couleurs.  
    Les r√©sultats incluent :
    - Les coefficients de r√©gression (log-odds).
    - Les odds ratios pour interpr√©ter l'effet de l'√¢ge sur chaque couleur.
    """)

    # Obtenir les r√©sultats et les graphiques interactifs
    # La fonction `perform_regression_analysis` retourne :
    # - Un DataFrame contenant les coefficients, odds ratios, p-values et leur significativit√©
    # - Deux graphiques interactifs : un pour les coefficients et un pour les odds ratios
    regression_results, fig_coefficients, fig_odds_ratios = reg_age_couleur.perform_regression_analysis(df)

    # Afficher le graphique interactif des coefficients de r√©gression
    st.write("**Graphique des coefficients de r√©gression :**")
    
    st.plotly_chart(fig_coefficients, use_container_width=True)
    st.write("Ce graphique montre l'effet de l'√¢ge sur la probabilit√© de choisir chaque couleur. Les barres positives indiquent que l'√¢ge augmente la probabilit√© de choisir une couleur, tandis que les barres n√©gatives indiquent que l'√¢ge diminue cette probabilit√©. Les barres plus fonc√©es sont celles qui sont statistiquement significatives ainsi plus on viellit plus on a de chance lorsqu'on achete une voiture d'en choisir une blanche et on a moins de chance d'en choisir une noir ou bleu.")
    
    
    st.write("**Graphique des odds ratios :**")
    st.plotly_chart(fig_odds_ratios, use_container_width=True)
    st.write("Ce graphique montre l'impact relatif de l'√¢ge sur les chances de choisir chaque couleur. Un odds ratio sup√©rieur √† 1 indique que l'√¢ge augmente les chances de choisir une couleur, tandis qu'un odds ratio inf√©rieur √† 1 indique que l'√¢ge diminue ces chances. Ici les barres fonc√©s repr√©sentent les couleurs qui sont significativement influenc√©es par l'√¢ge. Ainsi on confirme le constat fait pr√©c√©dement qui est que l'age influence positivement le choix de la couleur blanche et n√©gativement le choix des couleurs noir et bleu. Ainsi plus on viellit plus on a de chance de choisir une voiture blanche et moins on a de chance de choisir une voiture noir ou bleu.")
    
    # Afficher les r√©sultats sous forme de tableau interactif
    st.write("**R√©sum√© des r√©sultats de r√©gression :**")
    # Le tableau affiche les coefficients, odds ratios, p-values et si l'effet est significatif
    st.dataframe(regression_results)
    st.write("On voit ici r√©sum√© les r√©sultats de la r√©gression logistique. On voit que les couleurs noir et bleu sont significativement influenc√©es par l'√¢ge, tandis que les autres couleurs ne le sont pas. En effet on voit que les p-values des couleurs noir et bleu sont inf√©rieures √† 0.05, ce qui signifie qu'il y a une relation significative entre l'√¢ge et le choix de ces couleurs. La colonne 'Significatif' indique si l'effet est significatif (1) ou non (0).La colonne 'coefficient' indique l'effet de l'√¢ge sur le choix de la couleur, et la colonne 'odds_ratio' indique l'impact relatif de l'√¢ge sur les chances de choisir cette couleur. Par exemple, un odds ratio de 0.5 pour le noir signifie qu'avec chaque ann√©e d'√¢ge suppl√©mentaire, les chances de choisir une voiture noire diminuuent de 50%. De m√™me un odds ratio de 1.5 pour le blanc signifie qu'avec chaque ann√©e d'√¢ge suppl√©mentaire, les chances de choisir une voiture blanche augmentent de 50%.")
    # Conclusion de la section
    st.subheader("Conclusion")
    st.write("""
    En conclusion, nous avons observ√© des tendances int√©ressantes dans les pr√©f√©rences de couleurs selon l'√¢ge des clients. Nous avons vu des tendances g√©n√©rales, comme la popularit√© du blanc et du noir, mais aussi des variations plus fines selon les tranches d'√¢ge. 
    Les r√©sultats de la r√©gression logistique montrent que certaines couleurs sont significativement influenc√©es par l'√¢ge comme le blanc, le noir et le bleu tandis que d'autres ne le sont pas.  
    Ces informations peuvent √™tre utilis√©es pour mieux cibler les clients en fonction de leur profil. 
    """)

page_3.__name__ = "Hypoth√®se 3"

page_3.__name__ = "Hypoth√®se 3"

def page_4():
    
    
    st.title("La zone g√©ographique a t'elle un impact sur le choix du v√©hicule ?")

    ##Explication de l'hypoth√®se
    st.write("Nous allons chercher √† savoir ici si la zone g√©ographique d'un client a un impact sur le type de voiture qu'il choisit. Pour cela, nous allons s√©parer les clients en 5 clusters et analyser la r√©partition des v√©hicules par zone.")
    st.write("Nous allons utiliser les donn√©es de localisation des clients et les croiser avec les donn√©es de v√©hicules pour voir s'il y a des tendances g√©ographiques dans le choix des v√©hicules. Ainsi, nous avons d√©termin√© trois principales caract√©ristiques de voitures : la marque, le type de voiture et le type d'√©nergie utilis√©.")
    st.write("Nous allons √©galement utiliser des tests statistiques pour v√©rifier si les diff√©rences observ√©es sont significatives.")
    
    # Chargement des donn√©es

    df = pd.read_csv('table_full.csv', parse_dates=['DATE_CREATION', 'DATE_COMMANDE'])



# 1. Pr√©traitement des donn√©es g√©ographiques
# Conversion des codes postaux en coordonn√©es (n√©cessite une API ou fichier de r√©f√©rence)
# Exemple avec fichier des codes postaux fran√ßais :

    def get_geo_data(code_postal):
        """R√©cup√®re les coordonn√©es g√©ographiques pour un code postal donn√©"""
        url = "https://geo.api.gouv.fr/communes"
        params = {
            "codePostal": code_postal,
            "fields": "codesPostaux,nom,centre",
            "format": "json",
            "geometry": "centre"
        }
        
        try:
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            communes = response.json()
            
            results = []
            for commune in communes:
                # Extraction des coordonn√©es depuis l'objet 'centre'
                if 'centre' in commune:
                    coordinates = commune['centre']['coordinates']
                    for cp in commune['codesPostaux']:
                        results.append({
                            'CODE_POSTAL': cp,
                            'commune': commune['nom'],
                            'longitude': coordinates[0],
                            'latitude': coordinates[1]
                        })
            return results
        
        except requests.exceptions.RequestException as e:
            print(f"Erreur pour le code postal {code_postal}: {str(e)}")
            return []

    # R√©cup√©ration de tous les codes postaux uniques du dataframe
    codes_postaux_uniques = df['CODE_POSTAL'].unique()

    # Cr√©ation du dataframe g√©ographique
    geo_data = []
    for cp in codes_postaux_uniques:
        geo_data.extend(get_geo_data(cp))

    cp_geo = pd.DataFrame(geo_data).drop_duplicates()
    # Avant la fusion, convertir explicitement les types
    # Harmonisation des formats
    df['CODE_POSTAL'] = df['CODE_POSTAL'].astype(str).str.zfill(5).str.strip()
    cp_geo['CODE_POSTAL'] = cp_geo['CODE_POSTAL'].astype(str).str.zfill(5).str.strip()

    # Merge
    df = df.merge(cp_geo, on='CODE_POSTAL', how='left')
    df = df.dropna(subset=['latitude', 'longitude'])


    # V√©rification des types pour le plot
    df['latitude'] = pd.to_numeric(df['latitude'], errors='coerce')
    df['longitude'] = pd.to_numeric(df['longitude'], errors='coerce')


    # 2. Clustering g√©ographique
    coords = df[['latitude', 'longitude']].dropna()
    kmeans = KMeans(n_clusters= 5, random_state=42)
    df['geo_cluster'] = kmeans.fit_predict(coords)


    # 3. Analyse des v√©hicules par cluster
    features_vehicule = ['VEHICULE_MARQUE', 'VEHICULE_ENERGIE', 'VEHICULE_CATEGORIE']
    results = {}

    for feature in features_vehicule:
        contingency_table = pd.crosstab(df['geo_cluster'], df[feature])
        chi2, p, _, _ = chi2_contingency(contingency_table)
        results[feature] = p

    # 4. Visualisation
    # Define a custom discrete color scale for the clusters


    df['geo_cluster'] = df['geo_cluster'].astype(str)

    cluster_labels = {
    "0": "Nord-Est",
    "1": "Nord+Paris",
    "2": "Nord-Ouest",
    "3": "Sud-Est",
    "4": "Sud-Ouest"
}

# Map the cluster numbers to region names
    df['geo_cluster_label'] = df['geo_cluster'].map(cluster_labels)

    custom_color = ["#ffadad",  "#ffd6a5",  "#fdffb6",  "#caffbf",  "#9bf6ff",  "#a0c4ff",  "#bdb2ff","#ffc6ff"]

    fig_map = px.scatter_mapbox(
        df,
        lat="latitude",
        lon="longitude",
        color="geo_cluster_label",  # Colorer par cluster
        hover_name="commune",
        hover_data={"geo_cluster_label": True, "latitude": False, "longitude": False},
        text="geo_cluster_label",
        zoom=3,
        title="R√©partition g√©ographique des clusters",
        color_discrete_sequence=custom_color
    )

    fig_map.update_traces(
        marker=dict(size=10, opacity=0.8),  # Taille et opacit√© des points
        textfont=dict(size=10, color="black"),
        textposition="top center"
    )

    fig_map.update_layout(
        mapbox_style="carto-positron",
        mapbox_zoom=3,
        mapbox_center={"lat": df['latitude'].mean(), "lon": df['longitude'].mean()},
        margin={"r": 0, "t": 50, "l": 0, "b": 0}
    )

    st.plotly_chart(fig_map, use_container_width=True)


    # Display the Plotly map in Streamlit
   
    st.write("Cette carte interactive montre la r√©partition g√©ographique des 5 clusters.")
    st.write("Les clusters sont √©labor√©s gr√¢ce √† la m√©thode KMeans, qui regroupe les clients en fonction de leurs coordonn√©es g√©ographiques. Chaque cluster est repr√©sent√© par une couleur diff√©rente sur la carte.")
    st.write("En survolant les points, vous pouvez voir le nom de la commune associ√©e √† chaque point. Cela permet d'identifier facilement les zones g√©ographiques o√π se trouvent les clients.")
    st.write("Nous allons maintenant analyser la r√©partition des v√©hicules par cluster.")
    
    # Energy distribution by cluster
    st.subheader("R√©partition des √©nergies par cluster")
    energy_dist = df.groupby(['geo_cluster_label', 'VEHICULE_ENERGIE']).size().unstack()
    fig_energy, ax_energy = plt.subplots()
    colors = custom_color
    energy_dist.plot(kind='bar', stacked=True, ax=ax_energy, color=colors)
    ax_energy.set_title('R√©partition des √©nergies par cluster')
    ax_energy.set_ylabel('Nombre de v√©hicules')
    ax_energy.set_xlabel('Cluster')
    ax_energy.set_xticklabels(ax_energy.get_xticklabels(), rotation=0, ha='center')
    
    # Move the legend outside the plot
    ax_energy.legend(
        title="Energies",
        bbox_to_anchor=(1.05, 1),  # Position the legend outside the plot (to the right)
        loc='upper left',  # Anchor the legend to the upper-left corner of the bounding box
        fontsize=10  # Adjust font size for readability
    )

    st.pyplot(fig_energy)

    st.write("Ce graphique montre la r√©partition des types d'√©nergie par cluster. On voit que les tendances dans chaque cluster suivent la tendance g√©n√©rale des ventes vues dans la partie statistique descriptives. Ainsi dans chaque cluster, on voit qu'il y a une majorit√© de voitures essence et les voitures √©lectriques repr√©sentent une petite fraction des ventes. On remarque √©galement que les clusters Nord+Paris et Sud-Est ont tout les deux beaucoup de ventes d'hybrides alors que les autres clusters ont tendance √† avoir plus de voitures diesel que d'hybrides.")
    

    # Top marques by cluster
    st.subheader("R√©partition des marques par cluster")

    # Filter to include only the top 5 brands for each cluster
    top_marques_counts = (
        df.groupby(['geo_cluster_label', 'VEHICULE_MARQUE'])
        .size()
        .reset_index(name='count')  # Reset index to make 'count' a column
    )

    # Get the top 5 brands for each cluster
    top_marques_filtered = (
        top_marques_counts.groupby('geo_cluster_label', group_keys=False)
        .apply(lambda x: x.nlargest(5, 'count'))
    )

    # Pivot the filtered data for plotting
    top_marques_pivot = top_marques_filtered.pivot(
        index='geo_cluster_label', columns='VEHICULE_MARQUE', values='count'
    ).fillna(0)

    
    # Plot the filtered data
    fig_marques, ax_marques = plt.subplots(figsize=(10, 6))  # Adjust figure size for better readability
    top_marques_pivot.plot(kind='bar', stacked=True, ax=ax_marques, color=custom_color[:top_marques_pivot.shape[1]])

    # Set titles and labels
    ax_marques.set_title('R√©partition des marques par cluster (Top 5)', fontsize=14)
    ax_marques.set_ylabel('Nombre de v√©hicules', fontsize=12)
    ax_marques.set_xlabel('Cluster', fontsize=12)

    ax_marques.set_xticklabels(ax_marques.get_xticklabels(), rotation=0, ha='center')  # Set rotation to 0 and align center

    # Move the legend outside the plot
    ax_marques.legend(
        title="Marques",
        bbox_to_anchor=(1.05, 1),  # Position the legend outside the plot (to the right)
        loc='upper left',  # Anchor the legend to the upper-left corner of the bounding box
        fontsize=10  # Adjust font size for readability
    )

    # Display the plot in Streamlit
    st.pyplot(fig_marques)
    st.write("On repr√©sente ici la distribution des 5 marques les plus populaires de chaque clusters. On voit que les tendances dans chaque cluster suivent √©galement la tendance g√©n√©rale des ventes vues dans la partie statistique descriptives. Ainsi dans chaque cluster, il y a une majorit√© de voitures Citro√´n et Peugeot. On peut l'expliquer par le fait que ce sont des marques fran√ßaises et qu'elles sont donc plus populaire dans l'ensemble de la France. On remarque que le Sud-Est est la seule r√©gion avec des Volkswagen dans son Top 5. De m√™me le Nord-Est est la seule r√©gion avec la marque Opel et le Sud-Ouest est le seul √† avoir Nissan dans son top 5. Ainsi dans chaque cluster on retrouve toujours les marques Citro√´n, Peugeot et Dacia, puis 2 autres marques qui varient selon le cluster dans lequel on se trouve. ")

    # Category distribution by cluster
    st.subheader("R√©partition des cat√©gories par cluster")
    category_dist = df.groupby(['geo_cluster_label', 'VEHICULE_CATEGORIE']).size().unstack()
    fig_category, ax_category = plt.subplots()
    colors = custom_color
    category_dist.plot(kind='bar', stacked=True, ax=ax_category, color=colors)
    ax_category.set_title('R√©partition des cat√©gories par cluster')
    ax_category.set_ylabel('Nombre de v√©hicules')
    ax_category.set_xlabel('Cluster')
    ax_category.set_xticklabels(ax_category.get_xticklabels(), rotation=0, ha='center')
    
    # Move the legend outside the plot
    ax_category.legend(
        title="Cat√©gories",
        bbox_to_anchor=(1.05, 1),  # Position the legend outside the plot (to the right)
        loc='upper left',  # Anchor the legend to the upper-left corner of the bounding box
        fontsize=10  # Adjust font size for readability
    )

    st.pyplot(fig_category)
    st.write("Cette visualisation montre la r√©partition des cat√©gories par cluster. Dans chaque cluster, on voit une majorit√© de 4x4 SUV et citadine puis en plus faible quantit√© on trouve des monospaces, des berlines compactes et des breaks. On remarque et c'est le cas pour l'ensemble des graphiques que le Nord et Paris repr√©sentent une grande partie des ventes, puis on a le Sud-Est, ensuite le Nord-Est,le Sud-Ouest et le Nord-Ouest qui repr√©sentent moins de ventes. ")

# 5. Tests statistiques
    # Display p-values in scientific notation
    st.subheader("R√©sultats des tests d'ind√©pendance (p-value):")

    st.write("Dans cette partie nous allons d√©terminer si la zone g√©ographaphique a une influence sur la marque et le type d'√©nergie de la voiture √† l'aide des r√©sultats de test de chi2. Le test de chi2 nous permet de d√©terminer si deux variables qualitatives sont ind√©pendantes ou non.")
    
    st.markdown("**Marque** :  ")
    st.write("Nous avons donc tester l'hypoth√®se nulle : La variable marque est ind√©pendante du cluster g√©ographique auquel le client appartient. Autrement dit on teste si la distribution des diff√©rentes marque achet√© par les clients est la m√™me aux quatre coin de la France. L'hypoth√®se alternative est donc la suivante : La variable marque n'est pas ind√©pendante du cluster g√©ographique et donc la distribution des marques de voitures achet√©s par les clients n'est pas la m√™me selon ou on se trouve en France.")
    st.markdown(f"Ici la pvalue vaut **{results['VEHICULE_MARQUE']:.2e}**, elle est donc inf√©rieur √† 5%. En statistique cela signifie que l'on peut rejeter l'hypoth√®se nulle √† un niveau de confiance de 95%. Ainsi nous avan√ßons qu'il est possible que la localisation du client a un impact sur la marque de voiture qu'il va choisir.")
    
    st.markdown("**√ânergie :**  ")
    st.write("Nous avons donc tester l'hypoth√®se nulle : La variable √©nergie est ind√©pendante du cluster g√©ographique auquel le client appartient. Autrement dit on teste si la distribution des diff√©rentes √©nergies achet√© par les clients est la m√™me aux quatre coin de la France. L'hypoth√®se alternative est donc la suivante : La variable √©nergie n'est pas ind√©pendante du cluster g√©ographique et donc la distribution des √©nergies de voitures achet√©s par les clients n'est pas la m√™me selon ou on se trouve en France.")
    st.write(f"Ici la pvalue vaut **{results['VEHICULE_ENERGIE']:.2e}**, elle est donc inf√©rieur √† 5%. En statistique cela signifie que l'on peut rejeter l'hypoth√®se nulle √† un niveau de confiance de 95%. Ainsi nous avan√ßons qu'il est possible que la localisation du client a un impact sur le type d'√©nergie de voiture qu'il va choisir.")

    st.markdown("**Cat√©gorie** :  ")
    st.write("Nous avons donc tester l'hypoth√®se nulle : La variable cat√©gorie est ind√©pendante du cluster g√©ographique auquel le client appartient. Autrement dit on teste si la distribution des diff√©rentes cat√©gories achet√© par les clients est la m√™me aux quatre coin de la France. L'hypoth√®se alternative est donc la suivante : La variable cat√©gorie n'est pas ind√©pendante du cluster g√©ographique et donc la distribution des cat√©gories de voitures achet√©s par les clients n'est pas la m√™me selon ou on se trouve en France.")
    st.markdown(f"Ici la pvalue vaut **{results['VEHICULE_CATEGORIE']:.2e}**, elle est donc inf√©rieur √† 5%. En statistique cela signifie que l'on peut rejeter l'hypoth√®se nulle √† un niveau de confiance de 95%. Ainsi nous avan√ßons qu'il est possible que la localisation du client a un impact sur la cat√©gorie de voiture qu'il va choisir.") 

    st.markdown("**Conclusion** :")
    st.write("En conclusion, nous avons pu voir que la localisation du client a un impact sur la marque, le type et le type d'√©nergie consomm√© de la voiture qu'il va acheter. Cependant, il est important de noter que ces r√©sultats sont bas√©s sur des donn√©es historiques et qu'ils ne garantissent pas que ces tendances se poursuivront √† l'avenir. Il est donc important de continuer √† surveiller les tendances du march√© et d'adapter les strat√©gies en cons√©quence.")

page_4.__name__ = "Hypoth√®se 4"

st.set_page_config(
    page_title="Analyse du profil des clients Aramisauto",
    page_icon="üöó",
    layout="wide",
    initial_sidebar_state="expanded"
)

pg = st.navigation({
    "Analyse du profil des clients Aramisauto" : [bienvenue, vue_d_ensemble, page_1, page_2, page_3, page_4]
})

switch_voiture = st.sidebar.toggle("Activer le mode voiture")

color1 = st.sidebar.color_picker("Couleur 1", "#89CFF0")
color2 = st.sidebar.color_picker("Couleur 2", "#B19CD9") 

st.sidebar.markdown(
    """
    <div style="text-align: center; font-size: 12px; color: #999; padding-top: 1rem;">
       D√©velopp√© par BRAULT Juliette, CAUSEUR L√©na et PRUSIEWICZ Louis.
    </div>
    """,
    unsafe_allow_html=True
)

pg.run()


